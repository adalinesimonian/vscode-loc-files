<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="src/vs/workbench/contrib/debug/browser/baseDebugView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debug.lazyButton.tooltip">
      <source xml:lang="en">Click to expand</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointEditorContribution" source-language="en" datatype="plaintext"><body>
    <trans-unit id="addBreakpoint">
      <source xml:lang="en">Add Breakpoint</source>
    </trans-unit>
    <trans-unit id="addConditionalBreakpoint">
      <source xml:lang="en">Add Conditional Breakpoint...</source>
    </trans-unit>
    <trans-unit id="addLogPoint">
      <source xml:lang="en">Add Logpoint...</source>
    </trans-unit>
    <trans-unit id="addTriggeredBreakpoint">
      <source xml:lang="en">Add Triggered Breakpoint...</source>
    </trans-unit>
    <trans-unit id="breakpoint">
      <source xml:lang="en">Breakpoint</source>
    </trans-unit>
    <trans-unit id="breakpointHasConditionDisabled">
      <source xml:lang="en">This {0} has a {1} that will get lost on remove. Consider enabling the {0} instead.</source>
    </trans-unit>
    <trans-unit id="breakpointHasConditionEnabled">
      <source xml:lang="en">This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.</source>
    </trans-unit>
    <trans-unit id="breakpointHelper">
      <source xml:lang="en">Click to add a breakpoint</source>
    </trans-unit>
    <trans-unit id="condition">
      <source xml:lang="en">condition</source>
    </trans-unit>
    <trans-unit id="debugIcon.breakpointCurrentStackframeForeground">
      <source xml:lang="en">Icon color for the current breakpoint stack frame.</source>
    </trans-unit>
    <trans-unit id="debugIcon.breakpointDisabledForeground">
      <source xml:lang="en">Icon color for disabled breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugIcon.breakpointForeground">
      <source xml:lang="en">Icon color for breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugIcon.breakpointStackframeForeground">
      <source xml:lang="en">Icon color for all breakpoint stack frames.</source>
    </trans-unit>
    <trans-unit id="debugIcon.breakpointUnverifiedForeground">
      <source xml:lang="en">Icon color for unverified breakpoints.</source>
    </trans-unit>
    <trans-unit id="disable">
      <source xml:lang="en">&amp;&amp;Disable</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="disableBreakpoint">
      <source xml:lang="en">Disable {0}</source>
    </trans-unit>
    <trans-unit id="disableBreakpointOnLine">
      <source xml:lang="en">Disable Line Breakpoint</source>
    </trans-unit>
    <trans-unit id="disableInlineColumnBreakpoint">
      <source xml:lang="en">Disable Inline Breakpoint on Column {0}</source>
    </trans-unit>
    <trans-unit id="disableLogPoint">
      <source xml:lang="en">{0} {1}</source>
    </trans-unit>
    <trans-unit id="editBreakpoint">
      <source xml:lang="en">Edit {0}...</source>
    </trans-unit>
    <trans-unit id="editBreakpoints">
      <source xml:lang="en">Edit Breakpoints</source>
    </trans-unit>
    <trans-unit id="editInlineBreakpointOnColumn">
      <source xml:lang="en">Edit Inline Breakpoint on Column {0}</source>
    </trans-unit>
    <trans-unit id="editLineBreakpoint">
      <source xml:lang="en">Edit Line Breakpoint</source>
    </trans-unit>
    <trans-unit id="enable">
      <source xml:lang="en">&amp;&amp;Enable</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="enableBreakpoint">
      <source xml:lang="en">Enable {0}</source>
    </trans-unit>
    <trans-unit id="enableBreakpointOnLine">
      <source xml:lang="en">Enable Line Breakpoint</source>
    </trans-unit>
    <trans-unit id="enableBreakpoints">
      <source xml:lang="en">Enable Inline Breakpoint on Column {0}</source>
    </trans-unit>
    <trans-unit id="enableDisableBreakpoints">
      <source xml:lang="en">Enable/Disable Breakpoints</source>
    </trans-unit>
    <trans-unit id="logPoint">
      <source xml:lang="en">Logpoint</source>
    </trans-unit>
    <trans-unit id="message">
      <source xml:lang="en">message</source>
    </trans-unit>
    <trans-unit id="removeBreakpoint">
      <source xml:lang="en">Remove {0}</source>
    </trans-unit>
    <trans-unit id="removeBreakpoints">
      <source xml:lang="en">Remove Breakpoints</source>
    </trans-unit>
    <trans-unit id="removeInlineBreakpointOnColumn">
      <source xml:lang="en">Remove Inline Breakpoint on Column {0}</source>
    </trans-unit>
    <trans-unit id="removeLineBreakpoint">
      <source xml:lang="en">Remove Line Breakpoint</source>
    </trans-unit>
    <trans-unit id="removeLogPoint">
      <source xml:lang="en">&amp;&amp;Remove {0}</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="runToLine">
      <source xml:lang="en">Run to Line</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointWidget" source-language="en" datatype="plaintext"><body>
    <trans-unit id="bpMode">
      <source xml:lang="en">Mode</source>
    </trans-unit>
    <trans-unit id="breakpointType">
      <source xml:lang="en">Breakpoint Type</source>
    </trans-unit>
    <trans-unit id="breakpointWidgetExpressionPlaceholder">
      <source xml:lang="en">Break when expression evaluates to true. '{0}' to accept, '{1}' to cancel.</source>
    </trans-unit>
    <trans-unit id="breakpointWidgetHitCountPlaceholder">
      <source xml:lang="en">Break when hit count condition is met. '{0}' to accept, '{1}' to cancel.</source>
    </trans-unit>
    <trans-unit id="breakpointWidgetLogMessagePlaceholder">
      <source xml:lang="en">Message to log when breakpoint is hit. Expressions within {} are interpolated. '{0}' to accept, '{1}' to cancel.</source>
    </trans-unit>
    <trans-unit id="expression">
      <source xml:lang="en">Expression</source>
    </trans-unit>
    <trans-unit id="hitCount">
      <source xml:lang="en">Hit Count</source>
    </trans-unit>
    <trans-unit id="logMessage">
      <source xml:lang="en">Log Message</source>
    </trans-unit>
    <trans-unit id="noBpSource">
      <source xml:lang="en">Could not load source.</source>
    </trans-unit>
    <trans-unit id="noTriggerByBreakpoint">
      <source xml:lang="en">None</source>
    </trans-unit>
    <trans-unit id="ok">
      <source xml:lang="en">OK</source>
    </trans-unit>
    <trans-unit id="selectBreakpoint">
      <source xml:lang="en">Select breakpoint</source>
    </trans-unit>
    <trans-unit id="triggerByLoading">
      <source xml:lang="en">Loading...</source>
    </trans-unit>
    <trans-unit id="triggeredBy">
      <source xml:lang="en">Wait for Breakpoint</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointsView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="access">
      <source xml:lang="en">Access</source>
    </trans-unit>
    <trans-unit id="activateBreakpoints">
      <source xml:lang="en">Toggle Activate Breakpoints</source>
    </trans-unit>
    <trans-unit id="addDataBreakpointOnAddress">
      <source xml:lang="en">Add Data Breakpoint at Address</source>
    </trans-unit>
    <trans-unit id="addFunctionBreakpoint">
      <source xml:lang="en">Add Function Breakpoint</source>
    </trans-unit>
    <trans-unit id="breakpoint">
      <source xml:lang="en">Breakpoint</source>
    </trans-unit>
    <trans-unit id="breakpointUnsupported">
      <source xml:lang="en">Breakpoints of this type are not supported by the debugger</source>
    </trans-unit>
    <trans-unit id="breakpoints">
      <source xml:lang="en">Breakpoints</source>
    </trans-unit>
    <trans-unit id="dataBreakPointExpresionAriaLabel">
      <source xml:lang="en">Type expression. Data breakpoint will break when expression evaluates to true</source>
    </trans-unit>
    <trans-unit id="dataBreakPointHitCountAriaLabel">
      <source xml:lang="en">Type hit count. Data breakpoint will break when hit count is met.</source>
    </trans-unit>
    <trans-unit id="dataBreakpoint">
      <source xml:lang="en">Data Breakpoint</source>
    </trans-unit>
    <trans-unit id="dataBreakpointAccessType">
      <source xml:lang="en">Select the access type to monitor</source>
    </trans-unit>
    <trans-unit id="dataBreakpointAddrFormat">
      <source xml:lang="en">Address should be a range of numbers the form "[Start] - [End]" or "[Start] + [Bytes]"</source>
    </trans-unit>
    <trans-unit id="dataBreakpointAddrStartEnd">
      <source xml:lang="en">Number must be a decimal integer or hex value starting with "0x", got {0}</source>
    </trans-unit>
    <trans-unit id="dataBreakpointError">
      <source xml:lang="en">Failed to set data breakpoint at {0}: {1}</source>
    </trans-unit>
    <trans-unit id="dataBreakpointExpressionPlaceholder">
      <source xml:lang="en">Break when expression evaluates to true</source>
    </trans-unit>
    <trans-unit id="dataBreakpointHitCountPlaceholder">
      <source xml:lang="en">Break when hit count is met</source>
    </trans-unit>
    <trans-unit id="dataBreakpointMemoryRangePlaceholder">
      <source xml:lang="en">Absolute range (0x1234 - 0x1300) or range of bytes after an address (0x1234 + 0xff)</source>
    </trans-unit>
    <trans-unit id="dataBreakpointMemoryRangePrompt">
      <source xml:lang="en">Enter a memory range in which to break</source>
    </trans-unit>
    <trans-unit id="dataBreakpointUnsupported">
      <source xml:lang="en">Data breakpoints not supported by this debug type</source>
    </trans-unit>
    <trans-unit id="dataBreakpointsNotSupported">
      <source xml:lang="en">Data breakpoints are not supported by this debug type</source>
    </trans-unit>
    <trans-unit id="debug.decimal.address">
      <source xml:lang="en">Decimal Address: {0}</source>
    </trans-unit>
    <trans-unit id="disableAllBreakpoints">
      <source xml:lang="en">Disable All Breakpoints</source>
    </trans-unit>
    <trans-unit id="disabledBreakpoint">
      <source xml:lang="en">Disabled Breakpoint</source>
    </trans-unit>
    <trans-unit id="disabledLogpoint">
      <source xml:lang="en">Disabled Logpoint</source>
    </trans-unit>
    <trans-unit id="editBreakpoint">
      <source xml:lang="en">Edit Function Condition...</source>
    </trans-unit>
    <trans-unit id="editCondition">
      <source xml:lang="en">Edit Condition...</source>
    </trans-unit>
    <trans-unit id="editDataBreakpointOnAddress">
      <source xml:lang="en">Edit Address...</source>
    </trans-unit>
    <trans-unit id="editHitCount">
      <source xml:lang="en">Edit Hit Count...</source>
    </trans-unit>
    <trans-unit id="editMode">
      <source xml:lang="en">Edit Mode...</source>
    </trans-unit>
    <trans-unit id="enableAllBreakpoints">
      <source xml:lang="en">Enable All Breakpoints</source>
    </trans-unit>
    <trans-unit id="exceptionBreakpointAriaLabel">
      <source xml:lang="en">Type exception breakpoint condition</source>
    </trans-unit>
    <trans-unit id="exceptionBreakpointPlaceholder">
      <source xml:lang="en">Break when expression evaluates to true</source>
    </trans-unit>
    <trans-unit id="expression">
      <source xml:lang="en">Condition: {0}</source>
    </trans-unit>
    <trans-unit id="expressionAndHitCount">
      <source xml:lang="en">Condition: {0} | Hit Count: {1}</source>
    </trans-unit>
    <trans-unit id="expressionCondition">
      <source xml:lang="en">Expression condition: {0}</source>
    </trans-unit>
    <trans-unit id="functionBreakPointExpresionAriaLabel">
      <source xml:lang="en">Type expression. Function breakpoint will break when expression evaluates to true</source>
    </trans-unit>
    <trans-unit id="functionBreakPointHitCountAriaLabel">
      <source xml:lang="en">Type hit count. Function breakpoint will break when hit count is met.</source>
    </trans-unit>
    <trans-unit id="functionBreakPointInputAriaLabel">
      <source xml:lang="en">Type function breakpoint.</source>
    </trans-unit>
    <trans-unit id="functionBreakpoint">
      <source xml:lang="en">Function Breakpoint</source>
    </trans-unit>
    <trans-unit id="functionBreakpointExpressionPlaceholder">
      <source xml:lang="en">Break when expression evaluates to true</source>
    </trans-unit>
    <trans-unit id="functionBreakpointHitCountPlaceholder">
      <source xml:lang="en">Break when hit count is met</source>
    </trans-unit>
    <trans-unit id="functionBreakpointPlaceholder">
      <source xml:lang="en">Function to break on</source>
    </trans-unit>
    <trans-unit id="functionBreakpointUnsupported">
      <source xml:lang="en">Function breakpoints not supported by this debug type</source>
    </trans-unit>
    <trans-unit id="functionBreakpointsNotSupported">
      <source xml:lang="en">Function breakpoints are not supported by this debug type</source>
    </trans-unit>
    <trans-unit id="hitCount">
      <source xml:lang="en">Hit Count: {0}</source>
    </trans-unit>
    <trans-unit id="instructionBreakpoint">
      <source xml:lang="en">Instruction breakpoint</source>
    </trans-unit>
    <trans-unit id="instructionBreakpointAtAddress">
      <source xml:lang="en">Instruction breakpoint at address {0}</source>
    </trans-unit>
    <trans-unit id="instructionBreakpointUnsupported">
      <source xml:lang="en">Instruction breakpoints not supported by this debug type</source>
    </trans-unit>
    <trans-unit id="logMessage">
      <source xml:lang="en">Log Message: {0}</source>
    </trans-unit>
    <trans-unit id="miDataBreakpoint">
      <source xml:lang="en">&amp;&amp;Data Breakpoint...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miDisableAllBreakpoints">
      <source xml:lang="en">Disable A&amp;&amp;ll Breakpoints</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miEnableAllBreakpoints">
      <source xml:lang="en">&amp;&amp;Enable All Breakpoints</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miFunctionBreakpoint">
      <source xml:lang="en">&amp;&amp;Function Breakpoint...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miRemoveAllBreakpoints">
      <source xml:lang="en">Remove &amp;&amp;All Breakpoints</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="read">
      <source xml:lang="en">Read</source>
    </trans-unit>
    <trans-unit id="reapplyAllBreakpoints">
      <source xml:lang="en">Reapply All Breakpoints</source>
    </trans-unit>
    <trans-unit id="removeAllBreakpoints">
      <source xml:lang="en">Remove All Breakpoints</source>
    </trans-unit>
    <trans-unit id="removeBreakpoint">
      <source xml:lang="en">Remove Breakpoint</source>
    </trans-unit>
    <trans-unit id="selectBreakpointMode">
      <source xml:lang="en">Select Breakpoint Mode</source>
    </trans-unit>
    <trans-unit id="triggeredBy">
      <source xml:lang="en">Hit after breakpoint: {0}</source>
    </trans-unit>
    <trans-unit id="unverifiedBreakpoint">
      <source xml:lang="en">Unverified Breakpoint</source>
    </trans-unit>
    <trans-unit id="unverifiedExceptionBreakpoint">
      <source xml:lang="en">Unverified Exception Breakpoint</source>
    </trans-unit>
    <trans-unit id="unverifiedLogpoint">
      <source xml:lang="en">Unverified Logpoint</source>
    </trans-unit>
    <trans-unit id="write">
      <source xml:lang="en">Write</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/callStackEditorContribution" source-language="en" datatype="plaintext"><body>
    <trans-unit id="focusedStackFrameLineHighlight">
      <source xml:lang="en">Background color for the highlight of line at focused stack frame position.</source>
    </trans-unit>
    <trans-unit id="topStackFrameLineHighlight">
      <source xml:lang="en">Background color for the highlight of line at the top stack frame position.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/callStackView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="callStackAriaLabel">
      <source xml:lang="en">Debug Call Stack</source>
      <note>Debug is a noun in this context, not a verb.</note>
    </trans-unit>
    <trans-unit id="collapse">
      <source xml:lang="en">Collapse All</source>
    </trans-unit>
    <trans-unit id="loadAllStackFrames">
      <source xml:lang="en">Load More Stack Frames</source>
    </trans-unit>
    <trans-unit id="paused">
      <source xml:lang="en">Paused</source>
    </trans-unit>
    <trans-unit id="pausedOn">
      <source xml:lang="en">Paused on {0}</source>
      <note>indicates reason for program being paused</note>
    </trans-unit>
    <trans-unit id="restartFrame">
      <source xml:lang="en">Restart Frame</source>
    </trans-unit>
    <trans-unit id="running">
      <source xml:lang="en">Running</source>
      <note>indicates state</note>
    </trans-unit>
    <trans-unit id="session">
      <source xml:lang="en">Session</source>
      <note>Session is a noun</note>
    </trans-unit>
    <trans-unit id="sessionLabel">
      <source xml:lang="en">Session {0} {1}</source>
      <note>Placeholders stand for the session name and the session state. For example "Launch Program" and "Running"</note>
    </trans-unit>
    <trans-unit id="showMoreAndOrigin">
      <source xml:lang="en">Show {0} More: {1}</source>
    </trans-unit>
    <trans-unit id="showMoreStackFrames">
      <source xml:lang="en">Show {0} More Stack Frames</source>
    </trans-unit>
    <trans-unit id="showMoreStackFrames2">
      <source xml:lang="en">Show More Stack Frames</source>
    </trans-unit>
    <trans-unit id="stackFrameAriaLabel">
      <source xml:lang="en">Stack Frame {0}, line {1}, {2}</source>
    </trans-unit>
    <trans-unit id="threadAriaLabel">
      <source xml:lang="en">Thread {0} {1}</source>
      <note>Placeholders stand for the thread name and the thread state.For example "Thread 1" and "Stopped</note>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/callStackWidget" source-language="en" datatype="plaintext"><body>
    <trans-unit id="failedToLoadFrames">
      <source xml:lang="en">Failed to load stack frames: {0}</source>
    </trans-unit>
    <trans-unit id="goToFile">
      <source xml:lang="en">Open File</source>
    </trans-unit>
    <trans-unit id="stackFrameLocation">
      <source xml:lang="en">Line {0} column {1}</source>
    </trans-unit>
    <trans-unit id="stackTrace">
      <source xml:lang="en">Stack Trace</source>
    </trans-unit>
    <trans-unit id="stackTraceLabel">
      <source xml:lang="en">{0}, line {1} in {2}</source>
      <note>{0} is an extension-defined label, then line number and filename</note>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debug.contribution" source-language="en" datatype="plaintext"><body>
    <trans-unit id="SetNextStatement">
      <source xml:lang="en">Set Next Statement</source>
    </trans-unit>
    <trans-unit id="allowBreakpointsEverywhere">
      <source xml:lang="en">Allow setting breakpoints in any file.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="always">
      <source xml:lang="en">Always show debug in Status bar</source>
    </trans-unit>
    <trans-unit id="breakWhenValueChanges">
      <source xml:lang="en">Break on Value Change</source>
    </trans-unit>
    <trans-unit id="breakWhenValueIsAccessed">
      <source xml:lang="en">Break on Value Access</source>
    </trans-unit>
    <trans-unit id="breakWhenValueIsRead">
      <source xml:lang="en">Break on Value Read</source>
    </trans-unit>
    <trans-unit id="breakpoints">
      <source xml:lang="en">Breakpoints</source>
    </trans-unit>
    <trans-unit id="callStack">
      <source xml:lang="en">Call Stack</source>
    </trans-unit>
    <trans-unit id="cancel">
      <source xml:lang="en">Cancel debugging.</source>
    </trans-unit>
    <trans-unit id="closeReadonlyTabsOnEnd">
      <source xml:lang="en">At the end of a debug session, all the read-only tabs associated with that session will be closed</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="copyStackTrace">
      <source xml:lang="en">Copy Call Stack</source>
    </trans-unit>
    <trans-unit id="copyValue">
      <source xml:lang="en">Copy Value</source>
    </trans-unit>
    <trans-unit id="debug.autoExpandLazyVariables">
      <source xml:lang="en">Controls whether variables that are lazily resolved, such as getters, are automatically resolved and expanded by the debugger.</source>
    </trans-unit>
    <trans-unit id="debug.autoExpandLazyVariables.auto">
      <source xml:lang="en">When in screen reader optimized mode, automatically expand lazy variables.</source>
    </trans-unit>
    <trans-unit id="debug.autoExpandLazyVariables.off">
      <source xml:lang="en">Never automatically expand lazy variables.</source>
    </trans-unit>
    <trans-unit id="debug.autoExpandLazyVariables.on">
      <source xml:lang="en">Always automatically expand lazy variables.</source>
    </trans-unit>
    <trans-unit id="debug.confirmOnExit">
      <source xml:lang="en">Controls whether to confirm when the window closes if there are active debug sessions.</source>
    </trans-unit>
    <trans-unit id="debug.confirmOnExit.always">
      <source xml:lang="en">Always confirm if there are debug sessions.</source>
    </trans-unit>
    <trans-unit id="debug.confirmOnExit.never">
      <source xml:lang="en">Never confirm.</source>
    </trans-unit>
    <trans-unit id="debug.console.acceptSuggestionOnEnter">
      <source xml:lang="en">Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console.</source>
    </trans-unit>
    <trans-unit id="debug.console.closeOnEnd">
      <source xml:lang="en">Controls if the Debug Console should be automatically closed when the debug session ends.</source>
    </trans-unit>
    <trans-unit id="debug.console.collapseIdenticalLines">
      <source xml:lang="en">Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge.</source>
    </trans-unit>
    <trans-unit id="debug.console.fontFamily">
      <source xml:lang="en">Controls the font family in the Debug Console.</source>
    </trans-unit>
    <trans-unit id="debug.console.fontSize">
      <source xml:lang="en">Controls the font size in pixels in the Debug Console.</source>
    </trans-unit>
    <trans-unit id="debug.console.historySuggestions">
      <source xml:lang="en">Controls if the Debug Console should suggest previously typed input.</source>
    </trans-unit>
    <trans-unit id="debug.console.lineHeight">
      <source xml:lang="en">Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size.</source>
    </trans-unit>
    <trans-unit id="debug.console.maximumLines">
      <source xml:lang="en">Controls the maximum number of lines in the Debug Console.</source>
    </trans-unit>
    <trans-unit id="debug.console.wordWrap">
      <source xml:lang="en">Controls if the lines should wrap in the Debug Console.</source>
    </trans-unit>
    <trans-unit id="debug.disassemblyView.showSourceCode">
      <source xml:lang="en">Show Source Code in Disassembly View.</source>
    </trans-unit>
    <trans-unit id="debug.enableStatusBarColor">
      <source xml:lang="en">Color of the Status bar when debugger is active.</source>
    </trans-unit>
    <trans-unit id="debug.focusEditorOnBreak">
      <source xml:lang="en">Controls whether the editor should be focused when the debugger breaks.</source>
    </trans-unit>
    <trans-unit id="debug.focusWindowOnBreak">
      <source xml:lang="en">Controls whether the workbench window should be focused when the debugger breaks.</source>
    </trans-unit>
    <trans-unit id="debug.gutterMiddleClickAction.conditionalBreakpoint">
      <source xml:lang="en">Add Conditional Breakpoint.</source>
    </trans-unit>
    <trans-unit id="debug.gutterMiddleClickAction.logpoint">
      <source xml:lang="en">Add Logpoint.</source>
    </trans-unit>
    <trans-unit id="debug.gutterMiddleClickAction.none">
      <source xml:lang="en">Don't perform any action.</source>
    </trans-unit>
    <trans-unit id="debug.gutterMiddleClickAction.triggeredBreakpoint">
      <source xml:lang="en">Add Triggered Breakpoint.</source>
    </trans-unit>
    <trans-unit id="debug.hideLauncherWhileDebugging">
      <source xml:lang="en">Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when {0} is not `docked`.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="debug.hideSlowPreLaunchWarning">
      <source xml:lang="en">Hide the warning shown when a `preLaunchTask` has been running for a while.</source>
    </trans-unit>
    <trans-unit id="debug.onTaskErrors">
      <source xml:lang="en">Controls what to do when errors are encountered after running a preLaunchTask.</source>
    </trans-unit>
    <trans-unit id="debug.saveBeforeStart">
      <source xml:lang="en">Controls what editors to save before starting a debug session.</source>
    </trans-unit>
    <trans-unit id="debug.saveBeforeStart.allEditorsInActiveGroup">
      <source xml:lang="en">Save all editors in the active group before starting a debug session.</source>
    </trans-unit>
    <trans-unit id="debug.saveBeforeStart.nonUntitledEditorsInActiveGroup">
      <source xml:lang="en">Save all editors in the active group except untitled ones before starting a debug session.</source>
    </trans-unit>
    <trans-unit id="debug.saveBeforeStart.none">
      <source xml:lang="en">Don't save any editors before starting a debug session.</source>
    </trans-unit>
    <trans-unit id="debug.terminal.clearBeforeReusing">
      <source xml:lang="en">Before starting a new debug session in an integrated or external terminal, clear the terminal.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="debugAnyway">
      <source xml:lang="en">Ignore task errors and start debugging.</source>
    </trans-unit>
    <trans-unit id="debugCategory">
      <source xml:lang="en">Debug</source>
    </trans-unit>
    <trans-unit id="debugConfigurationTitle">
      <source xml:lang="en">Debug</source>
    </trans-unit>
    <trans-unit id="debugPanel">
      <source xml:lang="en">Debug Console</source>
      <note>Debug is a noun in this context, not a verb.</note>
    </trans-unit>
    <trans-unit id="debugToolBar.commandCenter">
      <source xml:lang="en">`(Experimental)` Show debug toolbar in the command center.</source>
    </trans-unit>
    <trans-unit id="debugToolBar.docked">
      <source xml:lang="en">Show debug toolbar only in debug views.</source>
    </trans-unit>
    <trans-unit id="debugToolBar.floating">
      <source xml:lang="en">Show debug toolbar in all views.</source>
    </trans-unit>
    <trans-unit id="debugToolBar.hidden">
      <source xml:lang="en">Do not show debug toolbar.</source>
    </trans-unit>
    <trans-unit id="disassembly">
      <source xml:lang="en">Disassembly</source>
    </trans-unit>
    <trans-unit id="editWatchExpression">
      <source xml:lang="en">Edit Expression</source>
    </trans-unit>
    <trans-unit id="gutterMiddleClickAction">
      <source xml:lang="en">Controls the action to perform when clicking the editor gutter with the middle mouse button.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="inlineBreakpoint">
      <source xml:lang="en">Inline Breakpoint</source>
    </trans-unit>
    <trans-unit id="inlineValues">
      <source xml:lang="en">Show variable values inline in editor while debugging.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="inlineValues.focusNoScroll">
      <source xml:lang="en">Show variable values inline in editor while debugging when the language supports inline value locations.</source>
    </trans-unit>
    <trans-unit id="inlineValues.off">
      <source xml:lang="en">Never show variable values inline in editor while debugging.</source>
    </trans-unit>
    <trans-unit id="inlineValues.on">
      <source xml:lang="en">Always show variable values inline in editor while debugging.</source>
    </trans-unit>
    <trans-unit id="jumpToCursor">
      <source xml:lang="en">Jump to Cursor</source>
    </trans-unit>
    <trans-unit id="launch">
      <source xml:lang="en">Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="loadedScripts">
      <source xml:lang="en">Loaded Scripts</source>
    </trans-unit>
    <trans-unit id="mRun">
      <source xml:lang="en">&amp;&amp;Run</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miAddConfiguration">
      <source xml:lang="en">A&amp;&amp;dd Configuration...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miContinue">
      <source xml:lang="en">&amp;&amp;Continue</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miInlineBreakpoint">
      <source xml:lang="en">Inline Breakp&amp;&amp;oint</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miInstallAdditionalDebuggers">
      <source xml:lang="en">&amp;&amp;Install Additional Debuggers...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miNewBreakpoint">
      <source xml:lang="en">&amp;&amp;New Breakpoint</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miRestart Debugging">
      <source xml:lang="en">&amp;&amp;Restart Debugging</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miRun">
      <source xml:lang="en">Run &amp;&amp;Without Debugging</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miStartDebugging">
      <source xml:lang="en">&amp;&amp;Start Debugging</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miStepInto">
      <source xml:lang="en">Step &amp;&amp;Into</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miStepOut">
      <source xml:lang="en">Step O&amp;&amp;ut</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miStepOver">
      <source xml:lang="en">Step &amp;&amp;Over</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miStopDebugging">
      <source xml:lang="en">&amp;&amp;Stop Debugging</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miToggleBreakpoint">
      <source xml:lang="en">Toggle Breakpoint</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miToggleDebugConsole">
      <source xml:lang="en">De&amp;&amp;bug Console</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miViewRun">
      <source xml:lang="en">&amp;&amp;Run</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="never">
      <source xml:lang="en">Never show debug in Status bar</source>
    </trans-unit>
    <trans-unit id="onFirstSessionStart">
      <source xml:lang="en">Show debug in Status bar only after debug was started for the first time</source>
    </trans-unit>
    <trans-unit id="openDebug">
      <source xml:lang="en">Controls when the debug view should open.</source>
    </trans-unit>
    <trans-unit id="openExplorerOnEnd">
      <source xml:lang="en">Automatically open the explorer view at the end of a debug session.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="prompt">
      <source xml:lang="en">Prompt user.</source>
    </trans-unit>
    <trans-unit id="removeWatchExpression">
      <source xml:lang="en">Remove Expression</source>
    </trans-unit>
    <trans-unit id="restartFrame">
      <source xml:lang="en">Restart Frame</source>
    </trans-unit>
    <trans-unit id="run">
      <source xml:lang="en">Run or Debug...</source>
    </trans-unit>
    <trans-unit id="run and debug">
      <source xml:lang="en">Run and Debug</source>
    </trans-unit>
    <trans-unit id="runMenu">
      <source xml:lang="en">Run</source>
    </trans-unit>
    <trans-unit id="setValue">
      <source xml:lang="en">Set Value</source>
    </trans-unit>
    <trans-unit id="showBreakpointsInOverviewRuler">
      <source xml:lang="en">Controls whether breakpoints should be shown in the overview ruler.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="showErrors">
      <source xml:lang="en">Show the Problems view and do not start debugging.</source>
    </trans-unit>
    <trans-unit id="showInStatusBar">
      <source xml:lang="en">Controls when the debug Status bar should be visible.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="showInlineBreakpointCandidates">
      <source xml:lang="en">Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="showSubSessionsInToolBar">
      <source xml:lang="en">Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="showVariableTypes">
      <source xml:lang="en">Show variable type in variable pane during debug session</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="startDebugPlaceholder">
      <source xml:lang="en">Type the name of a launch configuration to run.</source>
    </trans-unit>
    <trans-unit id="startDebuggingHelp">
      <source xml:lang="en">Start Debugging</source>
    </trans-unit>
    <trans-unit id="tasksQuickAccessHelp">
      <source xml:lang="en">Show All Debug Consoles</source>
    </trans-unit>
    <trans-unit id="tasksQuickAccessPlaceholder">
      <source xml:lang="en">Type the name of a debug console to open.</source>
    </trans-unit>
    <trans-unit id="terminateThread">
      <source xml:lang="en">Terminate Thread</source>
    </trans-unit>
    <trans-unit id="toolBarLocation">
      <source xml:lang="en">Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires {0}), or `hidden`.</source>
      <note>This is the description for a setting</note>
    </trans-unit>
    <trans-unit id="variables">
      <source xml:lang="en">Variables</source>
    </trans-unit>
    <trans-unit id="viewMemory">
      <source xml:lang="en">View Binary Data</source>
    </trans-unit>
    <trans-unit id="watch">
      <source xml:lang="en">Watch</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugActionViewItems" source-language="en" datatype="plaintext"><body>
    <trans-unit id="addConfigTo">
      <source xml:lang="en">Add Config ({0})...</source>
    </trans-unit>
    <trans-unit id="addConfiguration">
      <source xml:lang="en">Add Configuration...</source>
    </trans-unit>
    <trans-unit id="commentLabelWithKeybinding">
      <source xml:lang="en">{0}, use ({1}) for accessibility help</source>
    </trans-unit>
    <trans-unit id="commentLabelWithKeybindingNoKeybinding">
      <source xml:lang="en">{0}, run the command Open Accessibility Help which is currently not triggerable via keybinding.</source>
    </trans-unit>
    <trans-unit id="debugLaunchConfigurations">
      <source xml:lang="en">Debug Launch Configurations</source>
    </trans-unit>
    <trans-unit id="debugSession">
      <source xml:lang="en">Debug Session</source>
    </trans-unit>
    <trans-unit id="noConfigurations">
      <source xml:lang="en">No Configurations</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugAdapterManager" source-language="en" datatype="plaintext"><body>
    <trans-unit id="CouldNotFindLanguage">
      <source xml:lang="en">You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?</source>
    </trans-unit>
    <trans-unit id="debugName">
      <source xml:lang="en">Name of configuration; appears in the launch configuration dropdown menu.</source>
    </trans-unit>
    <trans-unit id="debugNoType">
      <source xml:lang="en">Debugger 'type' can not be omitted and must be of type 'string'.</source>
    </trans-unit>
    <trans-unit id="debugPostDebugTask">
      <source xml:lang="en">Task to run after debug session ends.</source>
    </trans-unit>
    <trans-unit id="debugPrelaunchTask">
      <source xml:lang="en">Task to run before debug session starts.</source>
    </trans-unit>
    <trans-unit id="debugServer">
      <source xml:lang="en">For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode</source>
    </trans-unit>
    <trans-unit id="findExtension">
      <source xml:lang="en">&amp;&amp;Find {0} extension</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="installExt">
      <source xml:lang="en">Install extension...</source>
    </trans-unit>
    <trans-unit id="installLanguage">
      <source xml:lang="en">Install an extension for {0}...</source>
    </trans-unit>
    <trans-unit id="moreOptionsForDebugType">
      <source xml:lang="en">More {0} options...</source>
    </trans-unit>
    <trans-unit id="selectDebug">
      <source xml:lang="en">Select debugger</source>
    </trans-unit>
    <trans-unit id="suggestedDebuggers">
      <source xml:lang="en">Suggested</source>
    </trans-unit>
    <trans-unit id="suppressMultipleSessionWarning">
      <source xml:lang="en">Disable the warning when trying to start the same debug configuration more than once.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugColors" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debugIcon.continueForeground">
      <source xml:lang="en">Debug toolbar icon for continue.</source>
    </trans-unit>
    <trans-unit id="debugIcon.disconnectForeground">
      <source xml:lang="en">Debug toolbar icon for disconnect.</source>
    </trans-unit>
    <trans-unit id="debugIcon.pauseForeground">
      <source xml:lang="en">Debug toolbar icon for pause.</source>
    </trans-unit>
    <trans-unit id="debugIcon.restartForeground">
      <source xml:lang="en">Debug toolbar icon for restart.</source>
    </trans-unit>
    <trans-unit id="debugIcon.startForeground">
      <source xml:lang="en">Debug toolbar icon for start debugging.</source>
    </trans-unit>
    <trans-unit id="debugIcon.stepBackForeground">
      <source xml:lang="en">Debug toolbar icon for step back.</source>
    </trans-unit>
    <trans-unit id="debugIcon.stepIntoForeground">
      <source xml:lang="en">Debug toolbar icon for step into.</source>
    </trans-unit>
    <trans-unit id="debugIcon.stepOutForeground">
      <source xml:lang="en">Debug toolbar icon for step over.</source>
    </trans-unit>
    <trans-unit id="debugIcon.stepOverForeground">
      <source xml:lang="en">Debug toolbar icon for step over.</source>
    </trans-unit>
    <trans-unit id="debugIcon.stopForeground">
      <source xml:lang="en">Debug toolbar icon for stop.</source>
    </trans-unit>
    <trans-unit id="debugToolBarBackground">
      <source xml:lang="en">Debug toolbar background color.</source>
    </trans-unit>
    <trans-unit id="debugToolBarBorder">
      <source xml:lang="en">Debug toolbar border color.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugCommands" source-language="en" datatype="plaintext"><body>
    <trans-unit id="addConfiguration">
      <source xml:lang="en">Add Configuration...</source>
    </trans-unit>
    <trans-unit id="addInlineBreakpoint">
      <source xml:lang="en">Add Inline Breakpoint</source>
    </trans-unit>
    <trans-unit id="addToWatchExpressions">
      <source xml:lang="en">Add to Watch</source>
    </trans-unit>
    <trans-unit id="callStackBottom">
      <source xml:lang="en">Navigate to Bottom of Call Stack</source>
    </trans-unit>
    <trans-unit id="callStackDown">
      <source xml:lang="en">Navigate Down Call Stack</source>
    </trans-unit>
    <trans-unit id="callStackTop">
      <source xml:lang="en">Navigate to Top of Call Stack</source>
    </trans-unit>
    <trans-unit id="callStackUp">
      <source xml:lang="en">Navigate Up Call Stack</source>
    </trans-unit>
    <trans-unit id="chooseLocation">
      <source xml:lang="en">Choose the specific location</source>
    </trans-unit>
    <trans-unit id="continueDebug">
      <source xml:lang="en">Continue</source>
    </trans-unit>
    <trans-unit id="copyAddress">
      <source xml:lang="en">Copy Address</source>
    </trans-unit>
    <trans-unit id="copyAsExpression">
      <source xml:lang="en">Copy as Expression</source>
    </trans-unit>
    <trans-unit id="copyValue">
      <source xml:lang="en">Copy Value</source>
    </trans-unit>
    <trans-unit id="debug">
      <source xml:lang="en">Debug</source>
    </trans-unit>
    <trans-unit id="disconnect">
      <source xml:lang="en">Disconnect</source>
    </trans-unit>
    <trans-unit id="disconnectSuspend">
      <source xml:lang="en">Disconnect and Suspend</source>
    </trans-unit>
    <trans-unit id="editor.debug.action.stepIntoTargets.none">
      <source xml:lang="en">No step targets available</source>
    </trans-unit>
    <trans-unit id="focusSession">
      <source xml:lang="en">Focus Session</source>
    </trans-unit>
    <trans-unit id="jumpToCursor">
      <source xml:lang="en">Jump to Cursor</source>
    </trans-unit>
    <trans-unit id="nextDebugConsole">
      <source xml:lang="en">Focus Next Debug Console</source>
    </trans-unit>
    <trans-unit id="noExecutableCode">
      <source xml:lang="en">No executable code is associated at the current cursor position.</source>
    </trans-unit>
    <trans-unit id="openLaunchJson">
      <source xml:lang="en">Open '{0}'</source>
    </trans-unit>
    <trans-unit id="openLoadedScript">
      <source xml:lang="en">Open Loaded Script...</source>
    </trans-unit>
    <trans-unit id="pauseDebug">
      <source xml:lang="en">Pause</source>
    </trans-unit>
    <trans-unit id="prevDebugConsole">
      <source xml:lang="en">Focus Previous Debug Console</source>
    </trans-unit>
    <trans-unit id="restartDebug">
      <source xml:lang="en">Restart</source>
    </trans-unit>
    <trans-unit id="selectAndStartDebugging">
      <source xml:lang="en">Select and Start Debugging</source>
    </trans-unit>
    <trans-unit id="selectDebugConsole">
      <source xml:lang="en">Select Debug Console</source>
    </trans-unit>
    <trans-unit id="selectDebugSession">
      <source xml:lang="en">Select Debug Session</source>
    </trans-unit>
    <trans-unit id="selectExceptionBreakpointsPlaceholder">
      <source xml:lang="en">Pick enabled exception breakpoints</source>
    </trans-unit>
    <trans-unit id="startDebug">
      <source xml:lang="en">Start Debugging</source>
    </trans-unit>
    <trans-unit id="startWithoutDebugging">
      <source xml:lang="en">Start Without Debugging</source>
    </trans-unit>
    <trans-unit id="stepIntoDebug">
      <source xml:lang="en">Step Into</source>
    </trans-unit>
    <trans-unit id="stepIntoTargetDebug">
      <source xml:lang="en">Step Into Target</source>
    </trans-unit>
    <trans-unit id="stepOutDebug">
      <source xml:lang="en">Step Out</source>
    </trans-unit>
    <trans-unit id="stepOverDebug">
      <source xml:lang="en">Step Over</source>
    </trans-unit>
    <trans-unit id="stop">
      <source xml:lang="en">Stop</source>
    </trans-unit>
    <trans-unit id="toggleExceptionBreakpoints">
      <source xml:lang="en">Toggle Exception Breakpoints</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugConfigurationManager" source-language="en" datatype="plaintext"><body>
    <trans-unit id="DebugConfig.failed">
      <source xml:lang="en">Unable to create 'launch.json' file inside the '.vscode' folder ({0}).</source>
    </trans-unit>
    <trans-unit id="editLaunchConfig">
      <source xml:lang="en">Edit Debug Configuration in launch.json</source>
    </trans-unit>
    <trans-unit id="selectConfiguration">
      <source xml:lang="en">Select Launch Configuration</source>
    </trans-unit>
    <trans-unit id="user settings">
      <source xml:lang="en">user settings</source>
    </trans-unit>
    <trans-unit id="workspace">
      <source xml:lang="en">workspace</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugConsoleQuickAccess" source-language="en" datatype="plaintext"><body>
    <trans-unit id="workbench.action.debug.startDebug">
      <source xml:lang="en">Start a New Debug Session</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugEditorActions" source-language="en" datatype="plaintext"><body>
    <trans-unit id="EditBreakpointEditorAction">
      <source xml:lang="en">Debug: Edit Breakpoint</source>
    </trans-unit>
    <trans-unit id="addToWatch">
      <source xml:lang="en">Add to Watch</source>
    </trans-unit>
    <trans-unit id="closeExceptionWidget">
      <source xml:lang="en">Close Exception Widget</source>
    </trans-unit>
    <trans-unit id="conditionalBreakpointEditorAction">
      <source xml:lang="en">Debug: Add Conditional Breakpoint...</source>
    </trans-unit>
    <trans-unit id="editor.debug.action.stepIntoTargets.notAvailable">
      <source xml:lang="en">Step targets are not available here</source>
    </trans-unit>
    <trans-unit id="evaluateInDebugConsole">
      <source xml:lang="en">Evaluate in Debug Console</source>
    </trans-unit>
    <trans-unit id="goToNextBreakpoint">
      <source xml:lang="en">Debug: Go to Next Breakpoint</source>
    </trans-unit>
    <trans-unit id="goToPreviousBreakpoint">
      <source xml:lang="en">Debug: Go to Previous Breakpoint</source>
    </trans-unit>
    <trans-unit id="logPointEditorAction">
      <source xml:lang="en">Debug: Add Logpoint...</source>
    </trans-unit>
    <trans-unit id="miConditionalBreakpoint">
      <source xml:lang="en">&amp;&amp;Conditional Breakpoint...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miDisassemblyView">
      <source xml:lang="en">&amp;&amp;DisassemblyView</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miEditBreakpoint">
      <source xml:lang="en">&amp;&amp;Edit Breakpoint</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miLogPoint">
      <source xml:lang="en">&amp;&amp;Logpoint...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miToggleBreakpoint">
      <source xml:lang="en">Toggle &amp;&amp;Breakpoint</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="miTriggerByBreakpoint">
      <source xml:lang="en">&amp;&amp;Triggered Breakpoint...</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="mitogglesource">
      <source xml:lang="en">&amp;&amp;ToggleSource</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="openDisassemblyView">
      <source xml:lang="en">Open Disassembly View</source>
    </trans-unit>
    <trans-unit id="runToCursor">
      <source xml:lang="en">Run to Cursor</source>
    </trans-unit>
    <trans-unit id="showDebugHover">
      <source xml:lang="en">Debug: Show Hover</source>
    </trans-unit>
    <trans-unit id="stepIntoTargets">
      <source xml:lang="en">Step Into Target</source>
      <note>Step Into Targets lets the user step into an exact function he or she is interested in.</note>
    </trans-unit>
    <trans-unit id="toggleBreakpointAction">
      <source xml:lang="en">Debug: Toggle Breakpoint</source>
    </trans-unit>
    <trans-unit id="toggleDisassemblyViewSourceCode">
      <source xml:lang="en">Toggle Source Code in Disassembly View</source>
    </trans-unit>
    <trans-unit id="toggleDisassemblyViewSourceCodeDescription">
      <source xml:lang="en">Shows or hides source code in disassembly</source>
    </trans-unit>
    <trans-unit id="triggerByBreakpointEditorAction">
      <source xml:lang="en">Debug: Add Triggered Breakpoint...</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugEditorContribution" source-language="en" datatype="plaintext"><body>
    <trans-unit id="editor.inlineValuesBackground">
      <source xml:lang="en">Color for the debug inline value background.</source>
    </trans-unit>
    <trans-unit id="editor.inlineValuesForeground">
      <source xml:lang="en">Color for the debug inline value text.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugHover" source-language="en" datatype="plaintext"><body>
    <trans-unit id="quickTip">
      <source xml:lang="en">Hold {0} key to switch to editor language hover</source>
      <note>"switch to editor language hover" means to show the programming language hover widget instead of the debug hover</note>
    </trans-unit>
    <trans-unit id="treeAriaLabel">
      <source xml:lang="en">Debug Hover</source>
    </trans-unit>
    <trans-unit id="variableAriaLabel">
      <source xml:lang="en">{0}, value {1}, variables, debug</source>
      <note>Do not translate placeholders. Placeholders are name and value of a variable.</note>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugIcons" source-language="en" datatype="plaintext"><body>
    <trans-unit id="breakpointsActivate">
      <source xml:lang="en">Icon for the activate action in the breakpoints view.</source>
    </trans-unit>
    <trans-unit id="breakpointsRemoveAll">
      <source xml:lang="en">Icon for the Remove All action in the breakpoints view.</source>
    </trans-unit>
    <trans-unit id="breakpointsViewIcon">
      <source xml:lang="en">View icon of the breakpoints view.</source>
    </trans-unit>
    <trans-unit id="callStackViewIcon">
      <source xml:lang="en">View icon of the call stack view.</source>
    </trans-unit>
    <trans-unit id="callstackViewSession">
      <source xml:lang="en">Icon for the session icon in the call stack view.</source>
    </trans-unit>
    <trans-unit id="debugBreakpoint">
      <source xml:lang="en">Icon for breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointConditional">
      <source xml:lang="en">Icon for conditional breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointConditionalDisabled">
      <source xml:lang="en">Icon for disabled conditional breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointConditionalUnverified">
      <source xml:lang="en">Icon for unverified conditional breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointData">
      <source xml:lang="en">Icon for data breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointDataDisabled">
      <source xml:lang="en">Icon for disabled data breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointDataUnverified">
      <source xml:lang="en">Icon for unverified data breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointDisabled">
      <source xml:lang="en">Icon for disabled breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointFunction">
      <source xml:lang="en">Icon for function breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointFunctionDisabled">
      <source xml:lang="en">Icon for disabled function breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointFunctionUnverified">
      <source xml:lang="en">Icon for unverified function breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointHint">
      <source xml:lang="en">Icon for breakpoint hints shown on hover in editor glyph margin.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointLog">
      <source xml:lang="en">Icon for log breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointLogDisabled">
      <source xml:lang="en">Icon for disabled log breakpoint.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointLogUnverified">
      <source xml:lang="en">Icon for unverified log breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointPendingOnTrigger">
      <source xml:lang="en">Icon for breakpoints waiting on another breakpoint.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointUnsupported">
      <source xml:lang="en">Icon for unsupported breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugBreakpointUnverified">
      <source xml:lang="en">Icon for unverified breakpoints.</source>
    </trans-unit>
    <trans-unit id="debugCollapseAll">
      <source xml:lang="en">Icon for the collapse all action in the debug views.</source>
    </trans-unit>
    <trans-unit id="debugConfigure">
      <source xml:lang="en">Icon for the debug configure action.</source>
    </trans-unit>
    <trans-unit id="debugConsole">
      <source xml:lang="en">Icon for the debug console open action.</source>
    </trans-unit>
    <trans-unit id="debugConsoleClearAll">
      <source xml:lang="en">Icon for the clear all action in the debug console.</source>
    </trans-unit>
    <trans-unit id="debugConsoleEvaluationInput">
      <source xml:lang="en">Icon for the debug evaluation input marker.</source>
    </trans-unit>
    <trans-unit id="debugConsoleEvaluationPrompt">
      <source xml:lang="en">Icon for the debug evaluation prompt.</source>
    </trans-unit>
    <trans-unit id="debugConsoleViewIcon">
      <source xml:lang="en">View icon of the debug console view.</source>
    </trans-unit>
    <trans-unit id="debugContinue">
      <source xml:lang="en">Icon for the debug continue action.</source>
    </trans-unit>
    <trans-unit id="debugDisconnect">
      <source xml:lang="en">Icon for the debug disconnect action.</source>
    </trans-unit>
    <trans-unit id="debugGripper">
      <source xml:lang="en">Icon for the debug bar gripper.</source>
    </trans-unit>
    <trans-unit id="debugInspectMemory">
      <source xml:lang="en">Icon for the inspect memory action.</source>
    </trans-unit>
    <trans-unit id="debugPause">
      <source xml:lang="en">Icon for the debug pause action.</source>
    </trans-unit>
    <trans-unit id="debugRemoveConfig">
      <source xml:lang="en">Icon for removing debug configurations.</source>
    </trans-unit>
    <trans-unit id="debugRestart">
      <source xml:lang="en">Icon for the debug restart action.</source>
    </trans-unit>
    <trans-unit id="debugRestartFrame">
      <source xml:lang="en">Icon for the debug restart frame action.</source>
    </trans-unit>
    <trans-unit id="debugReverseContinue">
      <source xml:lang="en">Icon for the debug reverse continue action.</source>
    </trans-unit>
    <trans-unit id="debugRun">
      <source xml:lang="en">Icon for the run or debug action.</source>
    </trans-unit>
    <trans-unit id="debugStackframe">
      <source xml:lang="en">Icon for a stackframe shown in the editor glyph margin.</source>
    </trans-unit>
    <trans-unit id="debugStackframeFocused">
      <source xml:lang="en">Icon for a focused stackframe  shown in the editor glyph margin.</source>
    </trans-unit>
    <trans-unit id="debugStart">
      <source xml:lang="en">Icon for the debug start action.</source>
    </trans-unit>
    <trans-unit id="debugStepBack">
      <source xml:lang="en">Icon for the debug step back action.</source>
    </trans-unit>
    <trans-unit id="debugStepInto">
      <source xml:lang="en">Icon for the debug step into action.</source>
    </trans-unit>
    <trans-unit id="debugStepOut">
      <source xml:lang="en">Icon for the debug step out action.</source>
    </trans-unit>
    <trans-unit id="debugStepOver">
      <source xml:lang="en">Icon for the debug step over action.</source>
    </trans-unit>
    <trans-unit id="debugStop">
      <source xml:lang="en">Icon for the debug stop action.</source>
    </trans-unit>
    <trans-unit id="loadedScriptsViewIcon">
      <source xml:lang="en">View icon of the loaded scripts view.</source>
    </trans-unit>
    <trans-unit id="runViewIcon">
      <source xml:lang="en">View icon of the run view.</source>
    </trans-unit>
    <trans-unit id="variablesViewIcon">
      <source xml:lang="en">View icon of the variables view.</source>
    </trans-unit>
    <trans-unit id="watchExpressionRemove">
      <source xml:lang="en">Icon for the Remove action in the watch view.</source>
    </trans-unit>
    <trans-unit id="watchExpressionsAdd">
      <source xml:lang="en">Icon for the add action in the watch view.</source>
    </trans-unit>
    <trans-unit id="watchExpressionsAddDataBreakpoint">
      <source xml:lang="en">Icon for the add data breakpoint action in the breakpoints view.</source>
    </trans-unit>
    <trans-unit id="watchExpressionsAddFuncBreakpoint">
      <source xml:lang="en">Icon for the add function breakpoint action in the watch view.</source>
    </trans-unit>
    <trans-unit id="watchExpressionsRemoveAll">
      <source xml:lang="en">Icon for the Remove All action in the watch view.</source>
    </trans-unit>
    <trans-unit id="watchViewIcon">
      <source xml:lang="en">View icon of the watch view.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugQuickAccess" source-language="en" datatype="plaintext"><body>
    <trans-unit id="addConfigTo">
      <source xml:lang="en">Add Config ({0})...</source>
    </trans-unit>
    <trans-unit id="addConfiguration">
      <source xml:lang="en">Add Configuration...</source>
    </trans-unit>
    <trans-unit id="configure">
      <source xml:lang="en">configure</source>
    </trans-unit>
    <trans-unit id="contributed">
      <source xml:lang="en">contributed</source>
      <note>contributed is lower case because it looks better like that in UI. Nothing preceeds it. It is a name of the grouping of debug configurations.</note>
    </trans-unit>
    <trans-unit id="customizeLaunchConfig">
      <source xml:lang="en">Configure Launch Configuration</source>
    </trans-unit>
    <trans-unit id="mostRecent">
      <source xml:lang="en">Most Recent</source>
    </trans-unit>
    <trans-unit id="noDebugResults">
      <source xml:lang="en">No matching launch configurations</source>
    </trans-unit>
    <trans-unit id="providerAriaLabel">
      <source xml:lang="en">{0} contributed configurations</source>
      <note>Placeholder stands for the provider label. For example "NodeJS".</note>
    </trans-unit>
    <trans-unit id="removeLaunchConfig">
      <source xml:lang="en">Remove Launch Configuration</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugService" source-language="en" datatype="plaintext"><body>
    <trans-unit id="1activeSession">
      <source xml:lang="en">1 active session</source>
    </trans-unit>
    <trans-unit id="active debug session">
      <source xml:lang="en">A debug session is still running that would terminate.</source>
    </trans-unit>
    <trans-unit id="breakpointAdded">
      <source xml:lang="en">Added breakpoint, line {0}, file {1}</source>
    </trans-unit>
    <trans-unit id="breakpointRemoved">
      <source xml:lang="en">Removed breakpoint, line {0}, file {1}</source>
    </trans-unit>
    <trans-unit id="compoundMustHaveConfigurations">
      <source xml:lang="en">Compound must have "configurations" attribute set in order to start multiple configurations.</source>
      <note>compound indicates a "compounds" configuration item
"configurations" is an attribute and should not be localized</note>
    </trans-unit>
    <trans-unit id="configMissing">
      <source xml:lang="en">Configuration '{0}' is missing in 'launch.json'.</source>
    </trans-unit>
    <trans-unit id="debugAdapterCrash">
      <source xml:lang="en">Debug adapter process has terminated unexpectedly ({0})</source>
    </trans-unit>
    <trans-unit id="debugRequesMissing">
      <source xml:lang="en">Attribute '{0}' is missing from the chosen debug configuration.</source>
    </trans-unit>
    <trans-unit id="debugRequestNotSupported">
      <source xml:lang="en">Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.</source>
    </trans-unit>
    <trans-unit id="debugTrust">
      <source xml:lang="en">Debugging executes build tasks and program code from your workspace.</source>
    </trans-unit>
    <trans-unit id="debugTypeMissing">
      <source xml:lang="en">Missing property 'type' for the chosen launch configuration.</source>
    </trans-unit>
    <trans-unit id="debugTypeNotSupported">
      <source xml:lang="en">Configured debug type '{0}' is not supported.</source>
    </trans-unit>
    <trans-unit id="debuggingPaused">
      <source xml:lang="en">{0}, debugging paused {1}, {2}:{3}</source>
      <note>First placeholder is the file line content, second placeholder is the reason why debugging is stopped, for example "breakpoint", third is the stack frame name, and last is the line number.</note>
    </trans-unit>
    <trans-unit id="installAdditionalDebuggers">
      <source xml:lang="en">Install {0} Extension</source>
      <note>Placeholder is the debug type, so for example "node", "python"</note>
    </trans-unit>
    <trans-unit id="launchJsonDoesNotExist">
      <source xml:lang="en">'launch.json' does not exist for passed workspace folder.</source>
    </trans-unit>
    <trans-unit id="multipleConfigurationNamesInWorkspace">
      <source xml:lang="en">There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.</source>
    </trans-unit>
    <trans-unit id="multipleSession">
      <source xml:lang="en">'{0}' is already running. Do you want to start another instance?</source>
    </trans-unit>
    <trans-unit id="nActiveSessions">
      <source xml:lang="en">{0} active sessions</source>
    </trans-unit>
    <trans-unit id="noConfigurationNameInWorkspace">
      <source xml:lang="en">Could not find launch configuration '{0}' in the workspace.</source>
    </trans-unit>
    <trans-unit id="noFolderWithName">
      <source xml:lang="en">Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.</source>
    </trans-unit>
    <trans-unit id="noFolderWorkspaceDebugError">
      <source xml:lang="en">The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type.</source>
    </trans-unit>
    <trans-unit id="runTrust">
      <source xml:lang="en">Running executes build tasks and program code from your workspace.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugSession" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debuggingStarted">
      <source xml:lang="en">Debugging started.</source>
    </trans-unit>
    <trans-unit id="debuggingStartedNoDebug">
      <source xml:lang="en">Started running without debugging.</source>
    </trans-unit>
    <trans-unit id="debuggingStopped">
      <source xml:lang="en">Debugging stopped.</source>
    </trans-unit>
    <trans-unit id="noDebugAdapter">
      <source xml:lang="en">No debugger available, can not send '{0}'</source>
    </trans-unit>
    <trans-unit id="sessionDoesNotSupporBytesBreakpoints">
      <source xml:lang="en">Session does not support breakpoints with bytes</source>
    </trans-unit>
    <trans-unit id="sessionNotReadyForBreakpoints">
      <source xml:lang="en">Session is not ready for breakpoints</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugSessionPicker" source-language="en" datatype="plaintext"><body>
    <trans-unit id="moveFocusedView.selectView">
      <source xml:lang="en">Search debug sessions by name</source>
    </trans-unit>
    <trans-unit id="workbench.action.debug.spawnFrom">
      <source xml:lang="en">Session {0} spawned from {1}</source>
    </trans-unit>
    <trans-unit id="workbench.action.debug.startDebug">
      <source xml:lang="en">Start a New Debug Session</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugStatus" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debugTarget">
      <source xml:lang="en">Debug: {0}</source>
    </trans-unit>
    <trans-unit id="selectAndStartDebug">
      <source xml:lang="en">Select and Start Debug Configuration</source>
    </trans-unit>
    <trans-unit id="status.debug">
      <source xml:lang="en">Debug</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugTaskRunner" source-language="en" datatype="plaintext"><body>
    <trans-unit id="DebugTaskNotFound">
      <source xml:lang="en">Could not find the specified task.</source>
    </trans-unit>
    <trans-unit id="DebugTaskNotFoundWithTaskId">
      <source xml:lang="en">Could not find the task '{0}'.</source>
    </trans-unit>
    <trans-unit id="abort">
      <source xml:lang="en">Abort</source>
    </trans-unit>
    <trans-unit id="configureTask">
      <source xml:lang="en">Configure Task</source>
    </trans-unit>
    <trans-unit id="debugAnyway">
      <source xml:lang="en">&amp;&amp;Debug Anyway</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="debugAnywayNoMemo">
      <source xml:lang="en">Debug Anyway</source>
    </trans-unit>
    <trans-unit id="invalidTaskReference">
      <source xml:lang="en">Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.</source>
    </trans-unit>
    <trans-unit id="preLaunchTaskError">
      <source xml:lang="en">Error exists after running preLaunchTask '{0}'.</source>
    </trans-unit>
    <trans-unit id="preLaunchTaskErrors">
      <source xml:lang="en">Errors exist after running preLaunchTask '{0}'.</source>
    </trans-unit>
    <trans-unit id="preLaunchTaskExitCode">
      <source xml:lang="en">The preLaunchTask '{0}' terminated with exit code {1}.</source>
    </trans-unit>
    <trans-unit id="preLaunchTaskTerminated">
      <source xml:lang="en">The preLaunchTask '{0}' terminated.</source>
    </trans-unit>
    <trans-unit id="remember">
      <source xml:lang="en">Remember my choice in user settings</source>
    </trans-unit>
    <trans-unit id="rememberTask">
      <source xml:lang="en">Remember my choice for this task</source>
    </trans-unit>
    <trans-unit id="runningTask">
      <source xml:lang="en">Waiting for preLaunchTask '{0}'...</source>
    </trans-unit>
    <trans-unit id="showErrors">
      <source xml:lang="en">&amp;&amp;Show Errors</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="taskNotTracked">
      <source xml:lang="en">The task '{0}' has not exited and doesn't have a 'problemMatcher' defined. Make sure to define a problem matcher for watch tasks.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugToolBar" source-language="en" datatype="plaintext"><body>
    <trans-unit id="notebook.moreRunActionsLabel">
      <source xml:lang="en">More...</source>
    </trans-unit>
    <trans-unit id="reverseContinue">
      <source xml:lang="en">Reverse</source>
    </trans-unit>
    <trans-unit id="stepBackDebug">
      <source xml:lang="en">Step Back</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/debugViewlet" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debugPanel">
      <source xml:lang="en">Debug Console</source>
    </trans-unit>
    <trans-unit id="miOpenConfigurations">
      <source xml:lang="en">Open &amp;&amp;Configurations</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="openLaunchConfigDescription">
      <source xml:lang="en">Opens the file used to configure how your program is debugged</source>
    </trans-unit>
    <trans-unit id="selectWorkspaceFolder">
      <source xml:lang="en">Select a workspace folder to create a launch.json file in or add it to the workspace config file</source>
      <note>User picks a workspace folder or a workspace configuration file here. Workspace configuration files can contain settings and thus a launch.json configuration can be written into one.</note>
    </trans-unit>
    <trans-unit id="startAdditionalSession">
      <source xml:lang="en">Start Additional Session</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/disassemblyView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="disassemblyTableColumnLabel">
      <source xml:lang="en">instructions</source>
    </trans-unit>
    <trans-unit id="disassemblyView">
      <source xml:lang="en">Disassembly View</source>
    </trans-unit>
    <trans-unit id="editorOpenedFromDisassemblyDescription">
      <source xml:lang="en">from disassembly</source>
    </trans-unit>
    <trans-unit id="instructionAddress">
      <source xml:lang="en">Address</source>
    </trans-unit>
    <trans-unit id="instructionBytes">
      <source xml:lang="en">Bytes</source>
    </trans-unit>
    <trans-unit id="instructionNotAvailable">
      <source xml:lang="en">Disassembly not available.</source>
    </trans-unit>
    <trans-unit id="instructionText">
      <source xml:lang="en">Instruction</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/exceptionWidget" source-language="en" datatype="plaintext"><body>
    <trans-unit id="close">
      <source xml:lang="en">Close</source>
    </trans-unit>
    <trans-unit id="debugExceptionWidgetBackground">
      <source xml:lang="en">Exception widget background color.</source>
    </trans-unit>
    <trans-unit id="debugExceptionWidgetBorder">
      <source xml:lang="en">Exception widget border color.</source>
    </trans-unit>
    <trans-unit id="exceptionThrown">
      <source xml:lang="en">Exception has occurred.</source>
    </trans-unit>
    <trans-unit id="exceptionThrownWithId">
      <source xml:lang="en">Exception has occurred: {0}</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/linkDetector" source-language="en" datatype="plaintext"><body>
    <trans-unit id="fileLink">
      <source xml:lang="en">Ctrl + click to {0}</source>
    </trans-unit>
    <trans-unit id="fileLinkMac">
      <source xml:lang="en">Cmd + click to {0}</source>
    </trans-unit>
    <trans-unit id="fileLinkWithPath">
      <source xml:lang="en">Ctrl + click to {0}
{1}</source>
    </trans-unit>
    <trans-unit id="fileLinkWithPathMac">
      <source xml:lang="en">Cmd + click to {0}
{1}</source>
    </trans-unit>
    <trans-unit id="followForwardedLink">
      <source xml:lang="en">follow link using forwarded port</source>
    </trans-unit>
    <trans-unit id="followLink">
      <source xml:lang="en">follow link</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/loadedScriptsView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="collapse">
      <source xml:lang="en">Collapse All</source>
    </trans-unit>
    <trans-unit id="loadedScriptsAriaLabel">
      <source xml:lang="en">Debug Loaded Scripts</source>
      <note>Debug is a noun in this context, not a verb.</note>
    </trans-unit>
    <trans-unit id="loadedScriptsFolderAriaLabel">
      <source xml:lang="en">Folder {0}, loaded script, debug</source>
    </trans-unit>
    <trans-unit id="loadedScriptsRootFolderAriaLabel">
      <source xml:lang="en">Workspace folder {0}, loaded script, debug</source>
    </trans-unit>
    <trans-unit id="loadedScriptsSession">
      <source xml:lang="en">Debug Session</source>
    </trans-unit>
    <trans-unit id="loadedScriptsSessionAriaLabel">
      <source xml:lang="en">Session {0}, loaded script, debug</source>
    </trans-unit>
    <trans-unit id="loadedScriptsSourceAriaLabel">
      <source xml:lang="en">{0}, loaded script, debug</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/rawDebugSession" source-language="en" datatype="plaintext"><body>
    <trans-unit id="canNotStart">
      <source xml:lang="en">The debugger needs to open a new tab or window for the debuggee but the browser prevented this. You must give permission to continue.</source>
    </trans-unit>
    <trans-unit id="continue">
      <source xml:lang="en">&amp;&amp;Continue</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
    <trans-unit id="moreInfo">
      <source xml:lang="en">More Info</source>
    </trans-unit>
    <trans-unit id="noDebugAdapter">
      <source xml:lang="en">No debugger available found. Can not send '{0}'.</source>
    </trans-unit>
    <trans-unit id="noDebugAdapterStart">
      <source xml:lang="en">No debug adapter, can not start debug session.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/repl" source-language="en" datatype="plaintext"><body>
    <trans-unit id="actions.repl.acceptInput">
      <source xml:lang="en">Debug Console: Accept Input</source>
      <note>Apply input from the debug console input box</note>
    </trans-unit>
    <trans-unit id="actions.repl.copyAll">
      <source xml:lang="en">Debug: Console Copy All</source>
    </trans-unit>
    <trans-unit id="clearRepl">
      <source xml:lang="en">Clear Console</source>
    </trans-unit>
    <trans-unit id="clearRepl.descriotion">
      <source xml:lang="en">Clears all program output from your debug REPL</source>
    </trans-unit>
    <trans-unit id="collapse">
      <source xml:lang="en">Collapse All</source>
    </trans-unit>
    <trans-unit id="commentLabelWithKeybinding">
      <source xml:lang="en">{0}, use ({1}) for accessibility help</source>
    </trans-unit>
    <trans-unit id="commentLabelWithKeybindingNoKeybinding">
      <source xml:lang="en">{0}, run the command Open Accessibility Help which is currently not triggerable via keybinding.</source>
    </trans-unit>
    <trans-unit id="copy">
      <source xml:lang="en">Copy</source>
    </trans-unit>
    <trans-unit id="copyAll">
      <source xml:lang="en">Copy All</source>
    </trans-unit>
    <trans-unit id="debugConsole">
      <source xml:lang="en">Debug Console</source>
    </trans-unit>
    <trans-unit id="debugFocusConsole">
      <source xml:lang="en">Focus on Debug Console View</source>
      <note>Debug is a noun in this context, not a verb.</note>
    </trans-unit>
    <trans-unit id="paste">
      <source xml:lang="en">Paste</source>
    </trans-unit>
    <trans-unit id="repl.action.filter">
      <source xml:lang="en">Debug Console: Focus Filter</source>
    </trans-unit>
    <trans-unit id="repl.action.find">
      <source xml:lang="en">Debug Console: Focus Find</source>
    </trans-unit>
    <trans-unit id="selectRepl">
      <source xml:lang="en">Select Debug Console</source>
    </trans-unit>
    <trans-unit id="showing filtered repl lines">
      <source xml:lang="en">Showing {0} of {1}</source>
    </trans-unit>
    <trans-unit id="startDebugFirst">
      <source xml:lang="en">Please start a debug session to evaluate expressions</source>
    </trans-unit>
    <trans-unit id="workbench.debug.filter.placeholder">
      <source xml:lang="en">Filter (e.g. text, !exclude, \escape)</source>
      <note>Text in the brackets after e.g. is not localizable</note>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/replAccessibilityHelp" source-language="en" datatype="plaintext"><body>
    <trans-unit id="repl.accessibleView">
      <source xml:lang="en">The Open Accessible View command{0} will allow character by character navigation of the console output.</source>
    </trans-unit>
    <trans-unit id="repl.clear">
      <source xml:lang="en">The Debug: Clear Console command{0} will clear the console output.</source>
    </trans-unit>
    <trans-unit id="repl.help">
      <source xml:lang="en">The debug console is a Read-Eval-Print-Loop that allows you to evaluate expressions and run commands and can be focused with{0}.</source>
    </trans-unit>
    <trans-unit id="repl.history">
      <source xml:lang="en">The debug console output history can be navigated with the up and down arrow keys.</source>
    </trans-unit>
    <trans-unit id="repl.input">
      <source xml:lang="en">The debug console input can be navigated to from the output with the Focus Next Widget command{0}.</source>
    </trans-unit>
    <trans-unit id="repl.lazyVariables">
      <source xml:lang="en">The setting `debug.expandLazyVariables` controls whether variables are evaluated automatically. This is enabled by default when using a screen reader.</source>
    </trans-unit>
    <trans-unit id="repl.output">
      <source xml:lang="en">The debug console output can be navigated to from the input field with the Focus Previous Widget command{0}.</source>
    </trans-unit>
    <trans-unit id="repl.showRunAndDebug">
      <source xml:lang="en">The Show Run and Debug view command{0} will open the Run and Debug view and provides more information about debugging.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/replViewer" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debugConsole">
      <source xml:lang="en">Debug Console</source>
    </trans-unit>
    <trans-unit id="occurred">
      <source xml:lang="en">, occurred {0} times</source>
      <note>Front will the value of the debug console element. Placeholder will be replaced by a number which represents occurrance count.</note>
    </trans-unit>
    <trans-unit id="replGroup">
      <source xml:lang="en">Debug console group {0}</source>
    </trans-unit>
    <trans-unit id="replRawObjectAriaLabel">
      <source xml:lang="en">Debug console variable {0}, value {1}</source>
    </trans-unit>
    <trans-unit id="replVariableAriaLabel">
      <source xml:lang="en">Variable {0}, value {1}</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/runAndDebugAccessibilityHelp" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debug.continue">
      <source xml:lang="en">- Debug: Continue command{0} will continue execution until the next breakpoint.</source>
    </trans-unit>
    <trans-unit id="debug.focusBreakpoints">
      <source xml:lang="en">- Debug: Focus Breakpoints View command{0} will focus the breakpoints view.</source>
    </trans-unit>
    <trans-unit id="debug.focusCallStack">
      <source xml:lang="en">- Debug: Focus Call Stack View command{0} will focus the call stack view.</source>
    </trans-unit>
    <trans-unit id="debug.focusVariables">
      <source xml:lang="en">- Debug: Focus Variables View command{0} will focus the variables view.</source>
    </trans-unit>
    <trans-unit id="debug.focusWatch">
      <source xml:lang="en">- Debug: Focus Watch View command{0} will focus the watch view.</source>
    </trans-unit>
    <trans-unit id="debug.help">
      <source xml:lang="en">Access debug output and evaluate expressions in the debug console, which can be focused with{0}.</source>
    </trans-unit>
    <trans-unit id="debug.restartDebugging">
      <source xml:lang="en">- Debug: Restart Debugging command{0} will restart the current debug session.</source>
    </trans-unit>
    <trans-unit id="debug.showRunAndDebug">
      <source xml:lang="en">The Show Run and Debug view command{0} will open the current view.</source>
    </trans-unit>
    <trans-unit id="debug.startDebugging">
      <source xml:lang="en">The Debug: Start Debugging command{0} will start a debug session.</source>
    </trans-unit>
    <trans-unit id="debug.stepInto">
      <source xml:lang="en">- Debug: Step Into command{0} will step into the next function call.</source>
    </trans-unit>
    <trans-unit id="debug.stepOut">
      <source xml:lang="en">- Debug: Step Out command{0} will step out of the current function call.</source>
    </trans-unit>
    <trans-unit id="debug.stepOver">
      <source xml:lang="en">- Debug: Step Over command{0} will step over the current function call.</source>
    </trans-unit>
    <trans-unit id="debug.stopDebugging">
      <source xml:lang="en">- Debug: Stop Debugging command{0} will stop the current debugging session.</source>
    </trans-unit>
    <trans-unit id="debug.views">
      <source xml:lang="en">The debug viewlet is comprised of several views that can be focused with the following commands or navigated to via tab then arrow keys:</source>
    </trans-unit>
    <trans-unit id="debug.watchSetting">
      <source xml:lang="en">The setting {0} controls whether watch variable changes are announced.</source>
    </trans-unit>
    <trans-unit id="onceDebugging">
      <source xml:lang="en">Once debugging, the following commands will be available:</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/statusbarColorProvider" source-language="en" datatype="plaintext"><body>
    <trans-unit id="commandCenter-activeBackground">
      <source xml:lang="en">Command center background color when a program is being debugged</source>
    </trans-unit>
    <trans-unit id="statusBarDebuggingBackground">
      <source xml:lang="en">Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window</source>
    </trans-unit>
    <trans-unit id="statusBarDebuggingBorder">
      <source xml:lang="en">Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window</source>
    </trans-unit>
    <trans-unit id="statusBarDebuggingForeground">
      <source xml:lang="en">Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/variablesView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="collapse">
      <source xml:lang="en">Collapse All</source>
    </trans-unit>
    <trans-unit id="removeVisualizer">
      <source xml:lang="en">Remove Visualizer</source>
    </trans-unit>
    <trans-unit id="useVisualizer">
      <source xml:lang="en">Visualize Variable...</source>
    </trans-unit>
    <trans-unit id="variableAriaLabel">
      <source xml:lang="en">{0}, value {1}</source>
      <note>Placeholders are variable name and variable value respectivly. They should not be translated.</note>
    </trans-unit>
    <trans-unit id="variableScopeAriaLabel">
      <source xml:lang="en">Scope {0}</source>
    </trans-unit>
    <trans-unit id="variableValueAriaLabel">
      <source xml:lang="en">Type new variable value</source>
    </trans-unit>
    <trans-unit id="variablesAriaTreeLabel">
      <source xml:lang="en">Debug Variables</source>
    </trans-unit>
    <trans-unit id="viewMemory.prompt">
      <source xml:lang="en">Inspecting binary data requires this extension.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/watchExpressionsView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="addWatchExpression">
      <source xml:lang="en">Add Expression</source>
    </trans-unit>
    <trans-unit id="collapse">
      <source xml:lang="en">Collapse All</source>
    </trans-unit>
    <trans-unit id="copyWatchExpression">
      <source xml:lang="en">Copy Expression</source>
    </trans-unit>
    <trans-unit id="removeAllWatchExpressions">
      <source xml:lang="en">Remove All Expressions</source>
    </trans-unit>
    <trans-unit id="typeNewValue">
      <source xml:lang="en">Type new value</source>
    </trans-unit>
    <trans-unit id="watchAriaTreeLabel">
      <source xml:lang="en">Debug Watch Expressions</source>
      <note>Debug is a noun in this context, not a verb.</note>
    </trans-unit>
    <trans-unit id="watchExpressionAriaLabel">
      <source xml:lang="en">{0}, value {1}</source>
    </trans-unit>
    <trans-unit id="watchExpressionInputAriaLabel">
      <source xml:lang="en">Type watch expression</source>
    </trans-unit>
    <trans-unit id="watchExpressionPlaceholder">
      <source xml:lang="en">Expression to watch</source>
    </trans-unit>
    <trans-unit id="watchVariableAriaLabel">
      <source xml:lang="en">{0}, value {1}</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/browser/welcomeView" source-language="en" datatype="plaintext"><body>
    <trans-unit id="allDebuggersDisabled">
      <source xml:lang="en">All debug extensions are disabled. Enable a debug extension or install a new one from the Marketplace.</source>
    </trans-unit>
    <trans-unit id="customizeRunAndDebug">
      <source xml:lang="en">To customize Run and Debug [create a launch.json file](command:{0}).</source>
      <note>Please do not translate the word "command", it is part of our internal syntax which must not change
{Locked="](command:{0})"}</note>
    </trans-unit>
    <trans-unit id="customizeRunAndDebugOpenFolder">
      <source xml:lang="en">To customize Run and Debug, [open a folder](command:{0}) and create a launch.json file.</source>
      <note>Please do not translate the word "command", it is part of our internal syntax which must not change
Please do not translate "launch.json", it is the specific configuration file name
{Locked="](command:{0})"}</note>
    </trans-unit>
    <trans-unit id="openAFileWhichCanBeDebugged">
      <source xml:lang="en">[Open a file](command:{0}) which can be debugged or run.</source>
      <note>Please do not translate the word "command", it is part of our internal syntax which must not change
{Locked="](command:{0})"}</note>
    </trans-unit>
    <trans-unit id="run">
      <source xml:lang="en">Run</source>
    </trans-unit>
    <trans-unit id="runAndDebugAction">
      <source xml:lang="en">Run and Debug</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/abstractDebugAdapter" source-language="en" datatype="plaintext"><body>
    <trans-unit id="timeout">
      <source xml:lang="en">Timeout after {0} ms for '{1}'</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debug" source-language="en" datatype="plaintext"><body>
    <trans-unit id="breakWhenValueChangesSupported">
      <source xml:lang="en">True when the focused session supports to break when value changes.</source>
    </trans-unit>
    <trans-unit id="breakWhenValueIsAccessedSupported">
      <source xml:lang="en">True when the focused breakpoint supports to break when value is accessed.</source>
    </trans-unit>
    <trans-unit id="breakWhenValueIsReadSupported">
      <source xml:lang="en">True when the focused breakpoint supports to break when value is read.</source>
    </trans-unit>
    <trans-unit id="breakpointHasModes">
      <source xml:lang="en">Whether the breakpoint has multiple modes it can switch to.</source>
    </trans-unit>
    <trans-unit id="breakpointInputFocused">
      <source xml:lang="en">True when the input box has focus in the BREAKPOINTS view.</source>
    </trans-unit>
    <trans-unit id="breakpointItemIsDataBytes">
      <source xml:lang="en">Whether the breakpoint item is a data breakpoint on a byte range.</source>
    </trans-unit>
    <trans-unit id="breakpointItemType">
      <source xml:lang="en">Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'</source>
    </trans-unit>
    <trans-unit id="breakpointSupportsCondition">
      <source xml:lang="en">True when the focused breakpoint supports conditions.</source>
    </trans-unit>
    <trans-unit id="breakpointWidgetVisibile">
      <source xml:lang="en">True when breakpoint editor zone widget is visible, false otherwise.</source>
    </trans-unit>
    <trans-unit id="breakpointsExist">
      <source xml:lang="en">True when at least one breakpoint exists.</source>
    </trans-unit>
    <trans-unit id="breakpointsFocused">
      <source xml:lang="en">True when the BREAKPOINTS view is focused, false otherwise.</source>
    </trans-unit>
    <trans-unit id="callStackFocused">
      <source xml:lang="en">True when the CALLSTACK view is focused, false otherwise.</source>
    </trans-unit>
    <trans-unit id="callStackItemStopped">
      <source xml:lang="en">True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.</source>
    </trans-unit>
    <trans-unit id="callStackItemType">
      <source xml:lang="en">Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'</source>
    </trans-unit>
    <trans-unit id="callStackSessionHasOneThread">
      <source xml:lang="en">True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.</source>
    </trans-unit>
    <trans-unit id="callStackSessionIsAttach">
      <source xml:lang="en">True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.</source>
    </trans-unit>
    <trans-unit id="canViewMemory">
      <source xml:lang="en">Indicates whether the item in the view has an associated memory refrence.</source>
    </trans-unit>
    <trans-unit id="debugConfigurationType">
      <source xml:lang="en">Debug type of the selected launch configuration. For example 'python'.</source>
    </trans-unit>
    <trans-unit id="debugExtensionsAvailable">
      <source xml:lang="en">True when there is at least one debug extension installed and enabled.</source>
    </trans-unit>
    <trans-unit id="debugProtocolVariableMenuContext">
      <source xml:lang="en">Represents the context the debug adapter sets on the focused variable in the VARIABLES view.</source>
    </trans-unit>
    <trans-unit id="debugSetDataBreakpointAddressSupported">
      <source xml:lang="en">True when the focused session supports 'getBreakpointInfo' request on an address.</source>
    </trans-unit>
    <trans-unit id="debugSetExpressionSupported">
      <source xml:lang="en">True when the focused session supports 'setExpression' request.</source>
    </trans-unit>
    <trans-unit id="debugSetVariableSupported">
      <source xml:lang="en">True when the focused session supports 'setVariable' request.</source>
    </trans-unit>
    <trans-unit id="debugState">
      <source xml:lang="en">State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.</source>
    </trans-unit>
    <trans-unit id="debugType">
      <source xml:lang="en">Debug type of the active debug session. For example 'python'.</source>
    </trans-unit>
    <trans-unit id="debugUX">
      <source xml:lang="en">Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.</source>
    </trans-unit>
    <trans-unit id="debuggerDisabled">
      <source xml:lang="en">Configured debug type '{0}' is installed but not supported in this environment.</source>
    </trans-unit>
    <trans-unit id="debuggersAvailable">
      <source xml:lang="en">True when there is at least one debug extensions active.</source>
    </trans-unit>
    <trans-unit id="disassembleRequestSupported">
      <source xml:lang="en">True when the focused sessions supports disassemble request.</source>
    </trans-unit>
    <trans-unit id="disassemblyViewFocus">
      <source xml:lang="en">True when the Disassembly View is focused.</source>
    </trans-unit>
    <trans-unit id="exceptionWidgetVisible">
      <source xml:lang="en">True when the exception widget is visible.</source>
    </trans-unit>
    <trans-unit id="expressionSelected">
      <source xml:lang="en">True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.</source>
    </trans-unit>
    <trans-unit id="focusedSessionIsAttach">
      <source xml:lang="en">True when the focused session is 'attach'.</source>
    </trans-unit>
    <trans-unit id="focusedSessionIsNoDebug">
      <source xml:lang="en">True when the focused session is run without debugging.</source>
    </trans-unit>
    <trans-unit id="focusedStackFrameHasInstructionReference">
      <source xml:lang="en">True when the focused stack frame has instruction pointer reference.</source>
    </trans-unit>
    <trans-unit id="hasDebugged">
      <source xml:lang="en">True when a debug session has been started at least once, false otherwise.</source>
    </trans-unit>
    <trans-unit id="inBreakpointWidget">
      <source xml:lang="en">True when focus is in the breakpoint editor zone widget, false otherwise.</source>
    </trans-unit>
    <trans-unit id="inDebugMode">
      <source xml:lang="en">True when debugging, false otherwise.</source>
    </trans-unit>
    <trans-unit id="inDebugRepl">
      <source xml:lang="en">True when focus is in the debug console, false otherwise.</source>
    </trans-unit>
    <trans-unit id="internalConsoleOptions">
      <source xml:lang="en">Controls when the internal Debug Console should open.</source>
    </trans-unit>
    <trans-unit id="jumpToCursorSupported">
      <source xml:lang="en">True when the focused session supports 'jumpToCursor' request.</source>
    </trans-unit>
    <trans-unit id="languageSupportsDisassembleRequest">
      <source xml:lang="en">True when the language in the current editor supports disassemble request.</source>
    </trans-unit>
    <trans-unit id="loadedScriptsItemType">
      <source xml:lang="en">Represents the item type of the focused element in the LOADED SCRIPTS view.</source>
    </trans-unit>
    <trans-unit id="loadedScriptsSupported">
      <source xml:lang="en">True when the focused sessions supports the LOADED SCRIPTS view</source>
    </trans-unit>
    <trans-unit id="multiSessionDebug">
      <source xml:lang="en">True when there is more than 1 active debug session.</source>
    </trans-unit>
    <trans-unit id="multiSessionRepl">
      <source xml:lang="en">True when there is more than 1 debug console.</source>
    </trans-unit>
    <trans-unit id="restartFrameSupported">
      <source xml:lang="en">True when the focused session supports 'restartFrame' requests.</source>
    </trans-unit>
    <trans-unit id="stackFrameSupportsRestart">
      <source xml:lang="en">True when the focused stack frame supports 'restartFrame'.</source>
    </trans-unit>
    <trans-unit id="stepBackSupported">
      <source xml:lang="en">True when the focused session supports 'stepBack' requests.</source>
    </trans-unit>
    <trans-unit id="stepIntoTargetsSupported">
      <source xml:lang="en">True when the focused session supports 'stepIntoTargets' request.</source>
    </trans-unit>
    <trans-unit id="suspendDebuggeeSupported">
      <source xml:lang="en">True when the focused session supports the suspend debuggee capability.</source>
    </trans-unit>
    <trans-unit id="terminateDebuggeeSupported">
      <source xml:lang="en">True when the focused session supports the terminate debuggee capability.</source>
    </trans-unit>
    <trans-unit id="terminateThreadsSupported">
      <source xml:lang="en">True when the focused session supports the terminate threads capability.</source>
    </trans-unit>
    <trans-unit id="variableEvaluateNamePresent">
      <source xml:lang="en">True when the focused variable has an 'evalauteName' field set.</source>
    </trans-unit>
    <trans-unit id="variableExtensionId">
      <source xml:lang="en">Extension ID of the variable source, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variableInterfaces">
      <source xml:lang="en">Any interfaces or contracts that the variable satisfies, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variableIsReadonly">
      <source xml:lang="en">True when the focused variable is read-only.</source>
    </trans-unit>
    <trans-unit id="variableLanguage">
      <source xml:lang="en">Language of the variable source, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variableName">
      <source xml:lang="en">Name of the variable, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variableType">
      <source xml:lang="en">Type of the variable, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variableValue">
      <source xml:lang="en">Value of the variable, present for debug visualization clauses.</source>
    </trans-unit>
    <trans-unit id="variablesFocused">
      <source xml:lang="en">True when the VARIABLES views is focused, false otherwise</source>
    </trans-unit>
    <trans-unit id="watchExpressionsExist">
      <source xml:lang="en">True when at least one watch expression exists, false otherwise.</source>
    </trans-unit>
    <trans-unit id="watchExpressionsFocused">
      <source xml:lang="en">True when the WATCH view is focused, false otherwise.</source>
    </trans-unit>
    <trans-unit id="watchItemType">
      <source xml:lang="en">Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugContentProvider" source-language="en" datatype="plaintext"><body>
    <trans-unit id="canNotResolveSource">
      <source xml:lang="en">Could not load source '{0}'.</source>
    </trans-unit>
    <trans-unit id="canNotResolveSourceWithError">
      <source xml:lang="en">Could not load source '{0}': {1}.</source>
    </trans-unit>
    <trans-unit id="unable">
      <source xml:lang="en">Unable to resolve the resource without a debug session</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugLifecycle" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debug.debugSessionCloseConfirmationPlural">
      <source xml:lang="en">There are active debug sessions, are you sure you want to stop them?</source>
    </trans-unit>
    <trans-unit id="debug.debugSessionCloseConfirmationSingular">
      <source xml:lang="en">There is an active debug session, are you sure you want to stop it?</source>
    </trans-unit>
    <trans-unit id="debug.stop">
      <source xml:lang="en">&amp;&amp;Stop Debugging</source>
      <note>&amp;&amp; denotes a mnemonic</note>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugModel" source-language="en" datatype="plaintext"><body>
    <trans-unit id="breakpointDirtydHover">
      <source xml:lang="en">Unverified breakpoint. File is modified, please restart debug session.</source>
    </trans-unit>
    <trans-unit id="invalidVariableAttributes">
      <source xml:lang="en">Invalid variable attributes</source>
    </trans-unit>
    <trans-unit id="notAvailable">
      <source xml:lang="en">not available</source>
    </trans-unit>
    <trans-unit id="paused">
      <source xml:lang="en">Paused</source>
    </trans-unit>
    <trans-unit id="pausedOn">
      <source xml:lang="en">Paused on {0}</source>
      <note>indicates reason for program being paused</note>
    </trans-unit>
    <trans-unit id="running">
      <source xml:lang="en">Running</source>
      <note>indicates state</note>
    </trans-unit>
    <trans-unit id="startDebugFirst">
      <source xml:lang="en">Please start a debug session to evaluate expressions</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugSchemas" source-language="en" datatype="plaintext"><body>
    <trans-unit id="app.launch.json.compound.folder">
      <source xml:lang="en">Name of folder in which the compound is located.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.compound.name">
      <source xml:lang="en">Name of compound. Appears in the launch configuration drop down menu.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.compound.stopAll">
      <source xml:lang="en">Controls whether manually terminating one session will stop all of the compound sessions.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.compounds">
      <source xml:lang="en">List of compounds. Each compound references multiple configurations which will get launched together.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.compounds.configurations">
      <source xml:lang="en">Names of configurations that will be started as part of this compound.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.configurations">
      <source xml:lang="en">List of configurations. Add new configurations or edit existing ones by using IntelliSense.</source>
    </trans-unit>
    <trans-unit id="app.launch.json.title">
      <source xml:lang="en">Launch</source>
    </trans-unit>
    <trans-unit id="app.launch.json.version">
      <source xml:lang="en">Version of this file format.</source>
    </trans-unit>
    <trans-unit id="compoundPrelaunchTask">
      <source xml:lang="en">Task to run before any of the compound configurations start.</source>
    </trans-unit>
    <trans-unit id="debugger name">
      <source xml:lang="en">Name</source>
    </trans-unit>
    <trans-unit id="debugger type">
      <source xml:lang="en">Type</source>
    </trans-unit>
    <trans-unit id="debuggers">
      <source xml:lang="en">Debuggers</source>
    </trans-unit>
    <trans-unit id="presentation">
      <source xml:lang="en">Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.</source>
    </trans-unit>
    <trans-unit id="presentation.group">
      <source xml:lang="en">Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.</source>
    </trans-unit>
    <trans-unit id="presentation.hidden">
      <source xml:lang="en">Controls if this configuration should be shown in the configuration dropdown and the command palette.</source>
    </trans-unit>
    <trans-unit id="presentation.order">
      <source xml:lang="en">Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.</source>
    </trans-unit>
    <trans-unit id="useUniqueNames">
      <source xml:lang="en">Please use unique configuration names.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.breakpoints">
      <source xml:lang="en">Contributes breakpoints.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.breakpoints.language">
      <source xml:lang="en">Allow breakpoints for this language.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.breakpoints.when">
      <source xml:lang="en">Condition which must be true to enable breakpoints in this language. Consider matching this to the debugger when clause as appropriate.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers">
      <source xml:lang="en">Contributes debug adapters.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.args">
      <source xml:lang="en">Optional arguments to pass to the adapter.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.configurationAttributes">
      <source xml:lang="en">JSON schema configurations for validating 'launch.json'.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.configurationSnippets">
      <source xml:lang="en">Snippets for adding new configurations in 'launch.json'.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.deprecated">
      <source xml:lang="en">Optional message to mark this debug type as being deprecated.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.hiddenWhen">
      <source xml:lang="en">When this condition is true, this debugger type is hidden from the debugger list, but is still enabled.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.initialConfigurations">
      <source xml:lang="en">Configurations for generating the initial 'launch.json'.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.label">
      <source xml:lang="en">Display name for this debug adapter.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.languages">
      <source xml:lang="en">List of languages for which the debug extension could be considered the "default debugger".</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.linux">
      <source xml:lang="en">Linux specific settings.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.linux.runtime">
      <source xml:lang="en">Runtime used for Linux.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.osx">
      <source xml:lang="en">macOS specific settings.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.osx.runtime">
      <source xml:lang="en">Runtime used for macOS.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.program">
      <source xml:lang="en">Path to the debug adapter program. Path is either absolute or relative to the extension folder.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.runtime">
      <source xml:lang="en">Optional runtime in case the program attribute is not an executable but requires a runtime.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.runtimeArgs">
      <source xml:lang="en">Optional runtime arguments.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.strings">
      <source xml:lang="en">UI strings contributed by this debug adapter.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.strings.unverifiedBreakpoints">
      <source xml:lang="en">When there are unverified breakpoints in a language supported by this debug adapter, this message will appear on the breakpoint hover and in the breakpoints view. Markdown and command links are supported.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.type">
      <source xml:lang="en">Unique identifier for this debug adapter.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.variables">
      <source xml:lang="en">Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.when">
      <source xml:lang="en">Condition which must be true to enable this type of debugger. Consider using 'shellExecutionSupported', 'virtualWorkspace', 'resourceScheme' or an extension-defined context key as appropriate for this.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.windows">
      <source xml:lang="en">Windows specific settings.</source>
    </trans-unit>
    <trans-unit id="vscode.extension.contributes.debuggers.windows.runtime">
      <source xml:lang="en">Runtime used for Windows.</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugSource" source-language="en" datatype="plaintext"><body>
    <trans-unit id="unknownSource">
      <source xml:lang="en">Unknown Source</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/debugger" source-language="en" datatype="plaintext"><body>
    <trans-unit id="cannot.find.da">
      <source xml:lang="en">Cannot find debug adapter for type '{0}'.</source>
    </trans-unit>
    <trans-unit id="debugLinuxConfiguration">
      <source xml:lang="en">Linux specific launch configuration attributes.</source>
    </trans-unit>
    <trans-unit id="debugOSXConfiguration">
      <source xml:lang="en">OS X specific launch configuration attributes.</source>
    </trans-unit>
    <trans-unit id="debugRequest">
      <source xml:lang="en">Request type of configuration. Can be "launch" or "attach".</source>
    </trans-unit>
    <trans-unit id="debugType">
      <source xml:lang="en">Type of configuration.</source>
    </trans-unit>
    <trans-unit id="debugTypeNotRecognised">
      <source xml:lang="en">The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.</source>
    </trans-unit>
    <trans-unit id="debugWindowsConfiguration">
      <source xml:lang="en">Windows specific launch configuration attributes.</source>
    </trans-unit>
    <trans-unit id="launch.config.comment1">
      <source xml:lang="en">Use IntelliSense to learn about possible attributes.</source>
    </trans-unit>
    <trans-unit id="launch.config.comment2">
      <source xml:lang="en">Hover to view descriptions of existing attributes.</source>
    </trans-unit>
    <trans-unit id="launch.config.comment3">
      <source xml:lang="en">For more information, visit: {0}</source>
    </trans-unit>
    <trans-unit id="node2NotSupported">
      <source xml:lang="en">"node2" is no longer supported, use "node" instead and set the "protocol" attribute to "inspector".</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/disassemblyViewInput" source-language="en" datatype="plaintext"><body>
    <trans-unit id="disassemblyEditorLabelIcon">
      <source xml:lang="en">Icon of the disassembly editor label.</source>
    </trans-unit>
    <trans-unit id="disassemblyInputName">
      <source xml:lang="en">Disassembly</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/loadedScriptsPicker" source-language="en" datatype="plaintext"><body>
    <trans-unit id="moveFocusedView.selectView">
      <source xml:lang="en">Search loaded scripts by name</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/common/replModel" source-language="en" datatype="plaintext"><body>
    <trans-unit id="consoleCleared">
      <source xml:lang="en">Console was cleared</source>
    </trans-unit>
</body></file>
  <file original="src/vs/workbench/contrib/debug/node/debugAdapter" source-language="en" datatype="plaintext"><body>
    <trans-unit id="debugAdapterBinNotFound">
      <source xml:lang="en">Debug adapter executable '{0}' does not exist.</source>
    </trans-unit>
    <trans-unit id="debugAdapterCannotDetermineExecutable">
      <source xml:lang="en">Cannot determine executable for debug adapter '{0}'.</source>
      <note>Adapter executable file not found</note>
    </trans-unit>
    <trans-unit id="unableToLaunchDebugAdapter">
      <source xml:lang="en">Unable to launch debug adapter from '{0}'.</source>
    </trans-unit>
    <trans-unit id="unableToLaunchDebugAdapterNoArgs">
      <source xml:lang="en">Unable to launch debug adapter.</source>
    </trans-unit>
</body></file>
</xliff>