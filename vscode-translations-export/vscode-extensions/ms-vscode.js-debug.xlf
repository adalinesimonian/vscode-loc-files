<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="extensions/ms-vscode.js-debug/package" source-language="en" datatype="plaintext"><body>
    <trans-unit id="node.launch.useWSL.deprecation">
      <source xml:lang="en">&apos;useWSL&apos; is deprecated and support for it will be dropped. Use the &apos;Remote - WSL&apos; extension instead.</source>
    </trans-unit>
    <trans-unit id="base.cascadeTerminateToConfigurations.label">
      <source xml:lang="en">A list of debug sessions which, when this debug session is terminated, will also be stopped.</source>
    </trans-unit>
    <trans-unit id="browser.vueComponentPaths">
      <source xml:lang="en">A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue&apos;s sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.</source>
    </trans-unit>
    <trans-unit id="node.resolveSourceMapLocations.description">
      <source xml:lang="en">A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with &quot;!&quot; to exclude them. May be set to an empty array or null to avoid restriction.</source>
    </trans-unit>
    <trans-unit id="node.launch.runtimeSourcemapPausePatterns">
      <source xml:lang="en">A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don&apos;t exist or can&apos;t be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).</source>
    </trans-unit>
    <trans-unit id="browser.file.description">
      <source xml:lang="en">A local html file to open in the browser</source>
    </trans-unit>
    <trans-unit id="browser.pathMapping.description">
      <source xml:lang="en">A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk</source>
    </trans-unit>
    <trans-unit id="node.sourceMapPathOverrides.description">
      <source xml:lang="en">A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.</source>
    </trans-unit>
    <trans-unit id="browser.sourceMapPathOverrides.description">
      <source xml:lang="en">A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.testConfigurationLabel">
      <source xml:lang="en">A single configuration to run from the file. If not specified, you may be asked to pick.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.runtimeExecutable.description">
      <source xml:lang="en">Absolute path to VS Code.</source>
    </trans-unit>
    <trans-unit id="node.launch.envFile.description">
      <source xml:lang="en">Absolute path to a file containing environment variable definitions.</source>
    </trans-unit>
    <trans-unit id="node.launch.program.description">
      <source xml:lang="en">Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.</source>
    </trans-unit>
    <trans-unit id="node.remoteRoot.description">
      <source xml:lang="en">Absolute path to the remote directory containing the program.</source>
    </trans-unit>
    <trans-unit id="node.launch.cwd.description">
      <source xml:lang="en">Absolute path to the working directory of the program being debugged. If you&apos;ve set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder</source>
    </trans-unit>
    <trans-unit id="add.xhr.breakpoint">
      <source xml:lang="en">Add XHR/fetch Breakpoint</source>
    </trans-unit>
    <trans-unit id="browser.includeLaunchArgs.description">
      <source xml:lang="en">Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.</source>
    </trans-unit>
    <trans-unit id="node.versionHint.description">
      <source xml:lang="en">Allows you to explicitly specify the Node version that&apos;s running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.</source>
    </trans-unit>
    <trans-unit id="browser.skipFiles.description">
      <source xml:lang="en">An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[&quot;**/node_modules/**&quot;, &quot;!**/node_modules/my-module/**&quot;]`</source>
    </trans-unit>
    <trans-unit id="skipFiles.description">
      <source xml:lang="en">An array of glob patterns for files to skip when debugging. The pattern `&lt;node_internals&gt;/**` matches all internal Node.js modules.</source>
    </trans-unit>
    <trans-unit id="extension.description">
      <source xml:lang="en">An extension for debugging Node.js programs and Chrome.</source>
    </trans-unit>
    <trans-unit id="edge.useWebView.attach.description">
      <source xml:lang="en">An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the &quot;MyTestSharedMemory&quot; when creating the pipe &quot;\\.\pipe\LOCAL\MyTestSharedMemory&quot;</source>
    </trans-unit>
    <trans-unit id="breakpoint.xhr.any">
      <source xml:lang="en">Any XHR/fetch</source>
    </trans-unit>
    <trans-unit id="node.attach.config.name">
      <source xml:lang="en">Attach</source>
    </trans-unit>
    <trans-unit id="node.launch.autoAttachChildProcesses.description">
      <source xml:lang="en">Attach debugger to new child processes automatically.</source>
    </trans-unit>
    <trans-unit id="attach.node.process">
      <source xml:lang="en">Attach to Node Process</source>
    </trans-unit>
    <trans-unit id="debug.terminal.attach">
      <source xml:lang="en">Attach to Node.js Terminal Process</source>
    </trans-unit>
    <trans-unit id="node.processattach.config.name">
      <source xml:lang="en">Attach to Process</source>
    </trans-unit>
    <trans-unit id="node.snippet.attach.description">
      <source xml:lang="en">Attach to a running node program</source>
    </trans-unit>
    <trans-unit id="chrome.attach.description">
      <source xml:lang="en">Attach to an instance of Chrome already in debug mode</source>
    </trans-unit>
    <trans-unit id="edge.attach.description">
      <source xml:lang="en">Attach to an instance of Edge already in debug mode</source>
    </trans-unit>
    <trans-unit id="node.snippet.remoteattach.description">
      <source xml:lang="en">Attach to the debug port of a remote node program</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachMode.disabled">
      <source xml:lang="en">Auto attach is disabled and not shown in status bar.</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachMode.always">
      <source xml:lang="en">Auto attach to every Node.js process launched in the terminal.</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachMode.smart">
      <source xml:lang="en">Auto attach when running scripts that aren&apos;t in a node_modules folder.</source>
    </trans-unit>
    <trans-unit id="smartStep.description">
      <source xml:lang="en">Automatically step through generated code that cannot be mapped back to the original source.</source>
    </trans-unit>
    <trans-unit id="browser.smartStep.description">
      <source xml:lang="en">Automatically step through unmapped lines in sourcemapped files. For example, code that TypeScript produces automatically when downcompiling async/await or other features.</source>
    </trans-unit>
    <trans-unit id="node.stopOnEntry.description">
      <source xml:lang="en">Automatically stop program after launch.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.stopOnEntry.description">
      <source xml:lang="en">Automatically stop the extension host after launch.</source>
    </trans-unit>
    <trans-unit id="browser.baseUrl.description">
      <source xml:lang="en">Base URL to resolve paths baseUrl. baseURL is trimmed when mapping URLs to the files on disk. Defaults to the launch URL domain.</source>
    </trans-unit>
    <trans-unit id="breakpoint.xhr.contains">
      <source xml:lang="en">Break when URL contains:</source>
    </trans-unit>
    <trans-unit id="browser.userDataDir.description">
      <source xml:lang="en">By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can&apos;t be launched if an instance is already running from `userDataDir`.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.rendererDebugOptions">
      <source xml:lang="en">Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.</source>
    </trans-unit>
    <trans-unit id="chrome.attach.label">
      <source xml:lang="en">Chrome: Attach</source>
    </trans-unit>
    <trans-unit id="chrome.launch.label">
      <source xml:lang="en">Chrome: Launch</source>
    </trans-unit>
    <trans-unit id="commands.networkClear.label">
      <source xml:lang="en">Clear Network Log</source>
    </trans-unit>
    <trans-unit id="node.launch.args.description">
      <source xml:lang="en">Command line arguments passed to the program.&#10;&#10;Can be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.</source>
    </trans-unit>
    <trans-unit id="debug.terminal.program.description">
      <source xml:lang="en">Command to run in the launched terminal. If not provided, the terminal will open without launching a program.</source>
    </trans-unit>
    <trans-unit id="browser.server.description">
      <source xml:lang="en">Configures a web server to start up. Takes the same configuration as the &apos;node&apos; launch task.</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachSmartPatterns">
      <source xml:lang="en">Configures glob patterns for determining when to attach in &quot;smart&quot; `#debug.javascript.autoAttachFilter#` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).</source>
    </trans-unit>
    <trans-unit id="browser.killBehavior.description">
      <source xml:lang="en">Configures how browser processes are killed when stopping the session with `cleanUp: wholeBrowser`. Can be:&#10;&#10;- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.&#10;- polite: gracefully tears down the process tree. It&apos;s possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.&#10;- none: no termination will happen.</source>
    </trans-unit>
    <trans-unit id="node.killBehavior.description">
      <source xml:lang="en">Configures how debug processes are killed when stopping the session. Can be:&#10;&#10;- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.&#10;- polite: gracefully tears down the process tree. It&apos;s possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.&#10;- none: no termination will happen.</source>
    </trans-unit>
    <trans-unit id="trace.description">
      <source xml:lang="en">Configures what diagnostic output is produced.</source>
    </trans-unit>
    <trans-unit id="trace.logFile.description">
      <source xml:lang="en">Configures where on disk logs are written.</source>
    </trans-unit>
    <trans-unit id="configuration.unmapMissingSources">
      <source xml:lang="en">Configures whether sourcemapped file where the original file can&apos;t be read will automatically be unmapped. If this is false (default), a prompt is shown.</source>
    </trans-unit>
    <trans-unit id="node.enableTurboSourcemaps.description">
      <source xml:lang="en">Configures whether to use a new, faster mechanism for sourcemap discovery</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.debugWebWorkerHost">
      <source xml:lang="en">Configures whether we should try to attach to the web worker extension host.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.debugWebviews">
      <source xml:lang="en">Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachMode">
      <source xml:lang="en">Configures which processes to automatically attach and debug when `#debug.node.autoAttach#` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.</source>
    </trans-unit>
    <trans-unit id="browser.disableNetworkCache.description">
      <source xml:lang="en">Controls whether to skip the network cache for each request</source>
    </trans-unit>
    <trans-unit id="commands.networkCopyURI.label">
      <source xml:lang="en">Copy Request URL</source>
    </trans-unit>
    <trans-unit id="debug.npm.parseError">
      <source xml:lang="en">Could not read {0}: {1}</source>
    </trans-unit>
    <trans-unit id="customPropertiesGenerator.description">
      <source xml:lang="en">Customize the properties shown for an object in the debugger (local variables, etc...). Samples:&#10;    1. { ...this, extraProperty: &apos;12345&apos; } // Add an extraProperty 12345 to all objects&#10;    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)&#10;    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties&#10;&#10;    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181</source>
    </trans-unit>
    <trans-unit id="customDescriptionGenerator.description">
      <source xml:lang="en">Customize the textual description the debugger shows for objects (local variables, etc...). Samples:&#10;      1. this.toString() // will call toString to print all objects&#10;      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue&#10;      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue&#10;      </source>
    </trans-unit>
    <trans-unit id="node.snippet.gulp.description">
      <source xml:lang="en">Debug gulp task (make sure to have a local gulp installed in your project)</source>
    </trans-unit>
    <trans-unit id="node.snippet.mocha.description">
      <source xml:lang="en">Debug mocha tests</source>
    </trans-unit>
    <trans-unit id="debug.npm.script">
      <source xml:lang="en">Debug npm Script</source>
    </trans-unit>
    <trans-unit id="node.port.description">
      <source xml:lang="en">Debug port to attach to. Default is 9229.</source>
    </trans-unit>
    <trans-unit id="node.snippet.electron.description">
      <source xml:lang="en">Debug the Electron main process</source>
    </trans-unit>
    <trans-unit id="node.snippet.yo.description">
      <source xml:lang="en">Debug yeoman generator (install by running `npm link` in project folder)</source>
    </trans-unit>
    <trans-unit id="configuration.terminalOptions">
      <source xml:lang="en">Default launch options for the JavaScript debug terminal and npm scripts.</source>
    </trans-unit>
    <trans-unit id="configuration.pickAndAttachOptions">
      <source xml:lang="en">Default options used when debugging a process through the `Debug: Attach to Node.js Process` command</source>
    </trans-unit>
    <trans-unit id="createDiagnostics.label">
      <source xml:lang="en">Diagnose Breakpoint Problems</source>
    </trans-unit>
    <trans-unit id="commands.disableSourceMapStepping.label">
      <source xml:lang="en">Disable Source Mapped Stepping</source>
    </trans-unit>
    <trans-unit id="node.disableOptimisticBPs.description">
      <source xml:lang="en">Don&apos;t set breakpoints in any file until a sourcemap has been loaded for that file.</source>
    </trans-unit>
    <trans-unit id="longPredictionWarning.disable">
      <source xml:lang="en">Don&apos;t show again</source>
    </trans-unit>
    <trans-unit id="edge.attach.label">
      <source xml:lang="en">Edge: Attach</source>
    </trans-unit>
    <trans-unit id="edge.launch.label">
      <source xml:lang="en">Edge: Launch</source>
    </trans-unit>
    <trans-unit id="edit.xhr.breakpoint">
      <source xml:lang="en">Edit XHR/fetch Breakpoint</source>
    </trans-unit>
    <trans-unit id="debug.npm.edit">
      <source xml:lang="en">Edit package.json</source>
    </trans-unit>
    <trans-unit id="browser.runtimeExecutable.description">
      <source xml:lang="en">Either &apos;canary&apos;, &apos;stable&apos;, &apos;custom&apos; or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.</source>
    </trans-unit>
    <trans-unit id="browser.runtimeExecutable.edge.description">
      <source xml:lang="en">Either &apos;canary&apos;, &apos;stable&apos;, &apos;dev&apos;, &apos;custom&apos; or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.</source>
    </trans-unit>
    <trans-unit id="commands.enableSourceMapStepping.label">
      <source xml:lang="en">Enable Source Mapped Stepping</source>
    </trans-unit>
    <trans-unit id="node.experimentalNetworking.description">
      <source xml:lang="en">Enable experimental inspection in Node.js. When set to `auto` this is enabled for versions of Node.js that support it. It can be set to `on` or `off` to enable or disable it explicitly.</source>
    </trans-unit>
    <trans-unit id="configuration.enableNetworkView">
      <source xml:lang="en">Enables the experimental network view for targets that support it.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.env.description">
      <source xml:lang="en">Environment variables passed to the extension host.</source>
    </trans-unit>
    <trans-unit id="node.launch.env.description">
      <source xml:lang="en">Environment variables passed to the program. The value `null` removes the variable from the environment.</source>
    </trans-unit>
    <trans-unit id="node.websocket.address.description">
      <source xml:lang="en">Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.</source>
    </trans-unit>
    <trans-unit id="commands.callersAdd.label">
      <source xml:lang="en">Exclude Caller</source>
    </trans-unit>
    <trans-unit id="commands.callersAdd.paletteLabel">
      <source xml:lang="en">Exclude caller from pausing in the current location</source>
    </trans-unit>
    <trans-unit id="node.remote.host.header.description">
      <source xml:lang="en">Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to &apos;localhost&apos;. This is useful when the inspector is running behind a proxy that only accept particular Host header.</source>
    </trans-unit>
    <trans-unit id="node.launch.console.externalTerminal.description">
      <source xml:lang="en">External terminal that can be configured via user settings</source>
    </trans-unit>
    <trans-unit id="timeouts.sourceMaps.sourceMapCumulativePause.description">
      <source xml:lang="en">Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted</source>
    </trans-unit>
    <trans-unit id="browser.revealPage">
      <source xml:lang="en">Focus Tab</source>
    </trans-unit>
    <trans-unit id="browser.browserAttachLocation.description">
      <source xml:lang="en">Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.</source>
    </trans-unit>
    <trans-unit id="browser.browserLaunchLocation.description">
      <source xml:lang="en">Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.</source>
    </trans-unit>
    <trans-unit id="browser.inspectUri.description">
      <source xml:lang="en">Format to use to rewrite the inspectUri: It&apos;s a template string that interpolates keys in `{curlyBraces}`. Available keys are:&#10; - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`&#10; - `port` is the debug port that Chrome is listening on.&#10; - `browserInspectUri` is the inspector URI on the launched browser&#10; - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: &quot;/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2&quot;).&#10; - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.&#10;</source>
    </trans-unit>
    <trans-unit id="node.launch.outputCapture.description">
      <source xml:lang="en">From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.</source>
    </trans-unit>
    <trans-unit id="commands.callersGoToCaller.label">
      <source xml:lang="en">Go to caller location</source>
    </trans-unit>
    <trans-unit id="commands.callersGoToTarget.label">
      <source xml:lang="en">Go to target location</source>
    </trans-unit>
    <trans-unit id="node.attach.processId.description">
      <source xml:lang="en">ID of process to attach to.</source>
    </trans-unit>
    <trans-unit id="browser.address.description">
      <source xml:lang="en">IP address or hostname the debugged browser is listening on.</source>
    </trans-unit>
    <trans-unit id="node.attachSimplePort.description">
      <source xml:lang="en">If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.</source>
    </trans-unit>
    <trans-unit id="outFiles.description">
      <source xml:lang="en">If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.</source>
    </trans-unit>
    <trans-unit id="node.attach.continueOnAttach">
      <source xml:lang="en">If true, we&apos;ll automatically resume programs launched and waiting on `--inspect-brk`</source>
    </trans-unit>
    <trans-unit id="node.profileStartup.description">
      <source xml:lang="en">If true, will start profiling as soon as the process launches</source>
    </trans-unit>
    <trans-unit id="browser.profileStartup.description">
      <source xml:lang="en">If true, will start profiling soon as the process launches</source>
    </trans-unit>
    <trans-unit id="longPredictionWarning.message">
      <source xml:lang="en">It&apos;s taking a while to configure your breakpoints. You can speed this up by updating the &apos;outFiles&apos; in your launch.json.</source>
    </trans-unit>
    <trans-unit id="debug.terminal.label">
      <source xml:lang="en">JavaScript Debug Terminal</source>
    </trans-unit>
    <trans-unit id="node.launch.config.name">
      <source xml:lang="en">Launch</source>
    </trans-unit>
    <trans-unit id="chrome.launch.description">
      <source xml:lang="en">Launch Chrome to debug a URL</source>
    </trans-unit>
    <trans-unit id="edge.launch.description">
      <source xml:lang="en">Launch Edge to debug a URL</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.config.name">
      <source xml:lang="en">Launch Extension</source>
    </trans-unit>
    <trans-unit id="extensionHost.snippet.launch.description">
      <source xml:lang="en">Launch a VS Code extension in debug mode</source>
    </trans-unit>
    <trans-unit id="node.snippet.launch.description">
      <source xml:lang="en">Launch a node program in debug mode</source>
    </trans-unit>
    <trans-unit id="node.snippet.npm.description">
      <source xml:lang="en">Launch a node program through an npm `debug` script</source>
    </trans-unit>
    <trans-unit id="node.launch.logging">
      <source xml:lang="en">Logging configuration</source>
    </trans-unit>
    <trans-unit id="timeouts.sourceMaps.sourceMapMinPause.description">
      <source xml:lang="en">Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed</source>
    </trans-unit>
    <trans-unit id="debug.npm.noScripts">
      <source xml:lang="en">No npm scripts found in your package.json</source>
    </trans-unit>
    <trans-unit id="longPredictionWarning.noFolder">
      <source xml:lang="en">No workspace folder open.</source>
    </trans-unit>
    <trans-unit id="node.console.title">
      <source xml:lang="en">Node Debug Console</source>
    </trans-unit>
    <trans-unit id="node.label">
      <source xml:lang="en">Node.js</source>
    </trans-unit>
    <trans-unit id="node.snippet.attach.label">
      <source xml:lang="en">Node.js: Attach</source>
    </trans-unit>
    <trans-unit id="node.snippet.attachProcess.label">
      <source xml:lang="en">Node.js: Attach to Process</source>
    </trans-unit>
    <trans-unit id="node.snippet.remoteattach.label">
      <source xml:lang="en">Node.js: Attach to Remote Program</source>
    </trans-unit>
    <trans-unit id="node.snippet.electron.label">
      <source xml:lang="en">Node.js: Electron Main</source>
    </trans-unit>
    <trans-unit id="node.snippet.gulp.label">
      <source xml:lang="en">Node.js: Gulp task</source>
    </trans-unit>
    <trans-unit id="node.snippet.launch.label">
      <source xml:lang="en">Node.js: Launch Program</source>
    </trans-unit>
    <trans-unit id="node.snippet.npm.label">
      <source xml:lang="en">Node.js: Launch via npm</source>
    </trans-unit>
    <trans-unit id="node.snippet.mocha.label">
      <source xml:lang="en">Node.js: Mocha Tests</source>
    </trans-unit>
    <trans-unit id="node.snippet.nodemon.label">
      <source xml:lang="en">Node.js: Nodemon Setup</source>
    </trans-unit>
    <trans-unit id="node.snippet.yo.label">
      <source xml:lang="en">Node.js: Yeoman generator</source>
    </trans-unit>
    <trans-unit id="configuration.autoAttachMode.explicit">
      <source xml:lang="en">Only auto attach when the `--inspect` is given.</source>
    </trans-unit>
    <trans-unit id="openEdgeDevTools.label">
      <source xml:lang="en">Open Browser Devtools</source>
    </trans-unit>
    <trans-unit id="debugLink.label">
      <source xml:lang="en">Open Link</source>
    </trans-unit>
    <trans-unit id="commands.networkOpenBody.label">
      <source xml:lang="en">Open Response Body</source>
    </trans-unit>
    <trans-unit id="commands.networkOpenBodyInHexEditor.label">
      <source xml:lang="en">Open Response Body in Hex Editor</source>
    </trans-unit>
    <trans-unit id="longPredictionWarning.open">
      <source xml:lang="en">Open launch.json</source>
    </trans-unit>
    <trans-unit id="node.snippet.attachProcess.description">
      <source xml:lang="en">Open process picker to select node process to attach to</source>
    </trans-unit>
    <trans-unit id="node.launch.runtimeArgs.description">
      <source xml:lang="en">Optional arguments passed to the runtime executable.</source>
    </trans-unit>
    <trans-unit id="browser.runtimeArgs.description">
      <source xml:lang="en">Optional arguments passed to the runtime executable.</source>
    </trans-unit>
    <trans-unit id="browser.env.description">
      <source xml:lang="en">Optional dictionary of environment key/value pairs for the browser.</source>
    </trans-unit>
    <trans-unit id="browser.cwd.description">
      <source xml:lang="en">Optional working directory for the runtime executable.</source>
    </trans-unit>
    <trans-unit id="configuration.debugByLinkOptions">
      <source xml:lang="en">Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to &quot;off&quot; to disable this behavior, or &quot;always&quot; to enable debugging in all terminals.</source>
    </trans-unit>
    <trans-unit id="extensionHost.launch.testConfiguration">
      <source xml:lang="en">Path to a test configuration file for the [test CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli).</source>
    </trans-unit>
    <trans-unit id="node.localRoot.description">
      <source xml:lang="en">Path to the local directory containing the program.</source>
    </trans-unit>
    <trans-unit id="node.launch.logging.cdp">
      <source xml:lang="en">Path to the log file for Chrome DevTools Protocol messages</source>
    </trans-unit>
    <trans-unit id="node.launch.logging.dap">
      <source xml:lang="en">Path to the log file for Debug Adapter Protocol messages</source>
    </trans-unit>
    <trans-unit id="browser.launch.port.description">
      <source xml:lang="en">Port for the browser to listen on. Defaults to &quot;0&quot;, which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.</source>
    </trans-unit>
    <trans-unit id="browser.attach.port.description">
      <source xml:lang="en">Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.</source>
    </trans-unit>
    <trans-unit id="pretty.print.script">
      <source xml:lang="en">Pretty print for debugging</source>
    </trans-unit>
    <trans-unit id="remove.eventListener.breakpoint.all">
      <source xml:lang="en">Remove All Event Listener Breakpoints</source>
    </trans-unit>
    <trans-unit id="remove.xhr.breakpoint.all">
      <source xml:lang="en">Remove All XHR/fetch Breakpoints</source>
    </trans-unit>
    <trans-unit id="remove.xhr.breakpoint">
      <source xml:lang="en">Remove XHR/fetch Breakpoint</source>
    </trans-unit>
    <trans-unit id="commands.callersRemoveAll.label">
      <source xml:lang="en">Remove all excluded callers</source>
    </trans-unit>
    <trans-unit id="commands.callersRemove.label">
      <source xml:lang="en">Remove excluded caller</source>
    </trans-unit>
    <trans-unit id="commands.networkReplayXHR.label">
      <source xml:lang="en">Replay Request</source>
    </trans-unit>
    <trans-unit id="requestCDPProxy.label">
      <source xml:lang="en">Request CDP Proxy for Debug Session</source>
    </trans-unit>
    <trans-unit id="configuration.resourceRequestOptions">
      <source xml:lang="en">Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.&#10;&#10;A common case to disable certificate verification can be done by passing `{ &quot;https&quot;: { &quot;rejectUnauthorized&quot;: false } }`.</source>
    </trans-unit>
    <trans-unit id="node.timeout.description">
      <source xml:lang="en">Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.</source>
    </trans-unit>
    <trans-unit id="browser.timeout.description">
      <source xml:lang="en">Retry for this number of milliseconds to connect to the browser. Default is 10000 ms.</source>
    </trans-unit>
    <trans-unit id="debug.terminal.snippet.label">
      <source xml:lang="en">Run &quot;npm start&quot; in a debug terminal</source>
    </trans-unit>
    <trans-unit id="node.launch.runtimeExecutable.description">
      <source xml:lang="en">Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.</source>
    </trans-unit>
    <trans-unit id="getDiagnosticLogs.label">
      <source xml:lang="en">Save Diagnostic JS Debug Logs</source>
    </trans-unit>
    <trans-unit id="node.showAsyncStacks.description">
      <source xml:lang="en">Show the async calls that led to the current call stack.</source>
    </trans-unit>
    <trans-unit id="debug.unverifiedBreakpoints">
      <source xml:lang="en">Some of your breakpoints could not be set. If you&apos;re having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics).</source>
      <note>{Locked=&apos;](command:extension.js-debug.createDiagnostics)&apos;}</note>
    </trans-unit>
    <trans-unit id="startWithStopOnEntry.label">
      <source xml:lang="en">Start Debugging and Stop on Entry</source>
    </trans-unit>
    <trans-unit id="start.with.stop.on.entry">
      <source xml:lang="en">Start Debugging and Stop on Entry</source>
    </trans-unit>
    <trans-unit id="profile.stop">
      <source xml:lang="en">Stop Performance Profile</source>
    </trans-unit>
    <trans-unit id="node.address.description">
      <source xml:lang="en">TCP/IP address of process to be debugged. Default is &apos;localhost&apos;.</source>
    </trans-unit>
    <trans-unit id="profile.start">
      <source xml:lang="en">Take Performance Profile</source>
    </trans-unit>
    <trans-unit id="configuration.defaultRuntimeExecutables">
      <source xml:lang="en">The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.</source>
    </trans-unit>
    <trans-unit id="browser.webRoot.description">
      <source xml:lang="en">This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for &quot;/&quot;</source>
    </trans-unit>
    <trans-unit id="timeouts.hoverEvaluation.description">
      <source xml:lang="en">Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.</source>
    </trans-unit>
    <trans-unit id="timeouts.generalDescription">
      <source xml:lang="en">Timeouts for several debugger operations.</source>
    </trans-unit>
    <trans-unit id="timeouts.generalDescription.markdown">
      <source xml:lang="en">Timeouts for several debugger operations.</source>
    </trans-unit>
    <trans-unit id="timeouts.sourceMaps.description">
      <source xml:lang="en">Timeouts related to source maps operations.</source>
    </trans-unit>
    <trans-unit id="add.eventListener.breakpoint">
      <source xml:lang="en">Toggle Event Listener Breakpoints</source>
    </trans-unit>
    <trans-unit id="toggle.skipping.this.file">
      <source xml:lang="en">Toggle Skipping this File</source>
    </trans-unit>
    <trans-unit id="debug.terminal.toggleAuto">
      <source xml:lang="en">Toggle Terminal Node.js Auto Attach</source>
    </trans-unit>
    <trans-unit id="base.enableDWARF.label">
      <source xml:lang="en">Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.</source>
    </trans-unit>
    <trans-unit id="enableContentValidation.description">
      <source xml:lang="en">Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.</source>
    </trans-unit>
    <trans-unit id="trace.boolean.description">
      <source xml:lang="en">Trace may be set to &apos;true&apos; to write diagnostic logs to the disk.</source>
    </trans-unit>
    <trans-unit id="workspaceTrust.description">
      <source xml:lang="en">Trust is required to debug code in this workspace.</source>
    </trans-unit>
    <trans-unit id="node.attach.restart.description">
      <source xml:lang="en">Try to reconnect to the program if we lose connection. If set to `true`, we&apos;ll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.</source>
    </trans-unit>
    <trans-unit id="node.launch.restart.description">
      <source xml:lang="en">Try to restart the program if it exits with a non-zero exit code.</source>
    </trans-unit>
    <trans-unit id="node.sourceMaps.description">
      <source xml:lang="en">Use JavaScript source maps (if they exist).</source>
    </trans-unit>
    <trans-unit id="browser.sourceMaps.description">
      <source xml:lang="en">Use JavaScript source maps (if they exist).</source>
    </trans-unit>
    <trans-unit id="node.launch.useWSL.description">
      <source xml:lang="en">Use Windows Subsystem for Linux.</source>
    </trans-unit>
    <trans-unit id="node.snippet.nodemon.description">
      <source xml:lang="en">Use nodemon to relaunch a debug session on source changes</source>
    </trans-unit>
    <trans-unit id="node.launch.console.internalConsole.description">
      <source xml:lang="en">VS Code Debug Console (which doesn&apos;t support to read input from a program)</source>
    </trans-unit>
    <trans-unit id="extensionHost.snippet.launch.label">
      <source xml:lang="en">VS Code Extension Development</source>
    </trans-unit>
    <trans-unit id="extensionHost.label">
      <source xml:lang="en">VS Code Extension Development</source>
    </trans-unit>
    <trans-unit id="node.launch.console.integratedTerminal.description">
      <source xml:lang="en">VS Code&apos;s integrated terminal</source>
    </trans-unit>
    <trans-unit id="node.launch.runtimeVersion.description">
      <source xml:lang="en">Version of `node` runtime to use. Requires `nvm`.</source>
    </trans-unit>
    <trans-unit id="commands.networkViewRequest.label">
      <source xml:lang="en">View Request as cURL</source>
    </trans-unit>
    <trans-unit id="chrome.label">
      <source xml:lang="en">Web App (Chrome)</source>
    </trans-unit>
    <trans-unit id="edge.label">
      <source xml:lang="en">Web App (Edge)</source>
    </trans-unit>
    <trans-unit id="browser.cleanUp.description">
      <source xml:lang="en">What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.</source>
    </trans-unit>
    <trans-unit id="edge.useWebView.launch.description">
      <source xml:lang="en">When &apos;true&apos;, the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.</source>
    </trans-unit>
    <trans-unit id="configuration.automaticallyTunnelRemoteServer">
      <source xml:lang="en">When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.</source>
    </trans-unit>
    <trans-unit id="edge.address.description">
      <source xml:lang="en">When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.</source>
    </trans-unit>
    <trans-unit id="edge.port.description">
      <source xml:lang="en">When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.</source>
    </trans-unit>
    <trans-unit id="configuration.npmScriptLensLocation">
      <source xml:lang="en">Where a &quot;Run&quot; and &quot;Debug&quot; code lens should be shown in your npm scripts. It may be on &quot;all&quot;, scripts, on &quot;top&quot; of the script section, or &quot;never&quot;.</source>
    </trans-unit>
    <trans-unit id="node.launch.console.description">
      <source xml:lang="en">Where to launch the debug target.</source>
    </trans-unit>
    <trans-unit id="browser.includeDefaultArgs.description">
      <source xml:lang="en">Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.</source>
    </trans-unit>
    <trans-unit id="browser.perScriptSourcemaps.description">
      <source xml:lang="en">Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to &quot;auto&quot;, we&apos;ll detect known cases where this is appropriate.</source>
    </trans-unit>
    <trans-unit id="browser.targetSelection">
      <source xml:lang="en">Whether to attach to all targets that match the URL filter (&quot;automatic&quot;) or ask to pick one (&quot;pick&quot;).</source>
    </trans-unit>
    <trans-unit id="node.attach.attachExistingChildren.description">
      <source xml:lang="en">Whether to attempt to attach to already-spawned child processes.</source>
    </trans-unit>
    <trans-unit id="browser.restart">
      <source xml:lang="en">Whether to reconnect if the browser connection is closed</source>
    </trans-unit>
    <trans-unit id="trace.stdio.description">
      <source xml:lang="en">Whether to return trace data from the launched application or browser.</source>
    </trans-unit>
    <trans-unit id="node.attach.attachSpawnedProcesses.description">
      <source xml:lang="en">Whether to set environment variables in the attached process to track spawned children.</source>
    </trans-unit>
    <trans-unit id="configuration.breakOnConditionalError">
      <source xml:lang="en">Whether to stop when conditional breakpoints throw an error.</source>
    </trans-unit>
    <trans-unit id="browser.sourceMapRenames.description">
      <source xml:lang="en">Whether to use the &quot;names&quot; mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.</source>
    </trans-unit>
    <trans-unit id="node.pauseForSourceMap.description">
      <source xml:lang="en">Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.</source>
    </trans-unit>
    <trans-unit id="browser.urlFilter.description">
      <source xml:lang="en">Will search for a page with this url and attach to it, if found. Can have * wildcards.</source>
    </trans-unit>
    <trans-unit id="browser.url.description">
      <source xml:lang="en">Will search for a tab with this exact url and attach to it, if found</source>
    </trans-unit>
    <trans-unit id="debug.npm.noWorkspaceFolder">
      <source xml:lang="en">You need to open a workspace folder to debug npm scripts.</source>
    </trans-unit>
    <trans-unit id="debug.terminal.welcome">
      <source xml:lang="en">[JavaScript Debug Terminal](command:extension.js-debug.createDebuggerTerminal)&#10;&#10;You can use the JavaScript Debug Terminal to debug Node.js processes run on the command line.</source>
      <note>{Locked=&apos;](command:extension.js-debug.createDebuggerTerminal)&apos;}</note>
    </trans-unit>
    <trans-unit id="debug.terminal.welcomeWithLink">
      <source xml:lang="en">[JavaScript Debug Terminal](command:extension.js-debug.createDebuggerTerminal)&#10;&#10;You can use the JavaScript Debug Terminal to debug Node.js processes run on the command line.&#10;&#10;[Debug URL](command:extension.js-debug.debugLink)</source>
      <note>{Locked=&apos;](command:extension.js-debug.createDebuggerTerminal)&apos;}
{Locked=&apos;](command:extension.js-debug.debugLink)&apos;}</note>
    </trans-unit>
    <trans-unit id="errors.timeout">
      <source xml:lang="en">{0}: timeout after {1}ms</source>
    </trans-unit>
  </body></file>
</xliff>